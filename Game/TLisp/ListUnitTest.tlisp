;	ListUnitTest.tlisp
;
;	Regression tests for list operations
;	Copyright (c) 2017 by Kronosaur Productions, LLC. All Rights Reserved

(setq TEST_SUITE (list

	;	Map

	{	code: '(map Nil theEntry theEntry)							result: Nil	}
	{	code: '(map (list 1 2 3) theEntry (+ 1 theEntry))			result: '(2 3 4)	}

	;	Map of structs

	{	code: '(map { a:1 b:2 c:3 } theEntry theEntry)			result: '((a 1) (b 2) (c 3))	}

	;	Reduce unique

	{	code: '(map (list 3 1 2 3 3 5) 'reduceUnique theEntry theEntry)
		result: '(1 2 3 5)	}

	{	code: '(map (list { a:1 } { a:2 } { a:3 } { a:1 }) 'reduceUnique theEntry (@ theEntry 'a))
		result: '(1 2 3)	}

	{	code: '(map (list { a:1 } { a:2 } { a:3 } { a:1 }) '(reduceUnique original) theEntry (@ theEntry 'a))
		result: '({ a:1 } { a:2} { a: 3})	}
	))

(block (
	(testNum 0)
	(successTests 0)
	(failedTests 0)
	)
	(print "List Unit Test")

	(enum TEST_SUITE theTest
		(errblock (errorResult result)
			(setq testNum (add testNum 1))
			(setq result (eval (@ theTest 'code)))
			(switch
				(eq result (@ theTest 'result))
					(block ()
						; (print "[" testNum "] PASS")
						(setq successTests (add successTests 1))
						)

				(block ()
					(print "[" testNum "] FAIL: " (@ theTest 'code) " -> " result " (expected " (@ theTest 'result) ")")
					(setq failedTests (add failedTests 1))
					)
				)

			;	Error

			(block ()
				(print "[" testNum "] ERROR: " errorResult)
				(setq failedTests (add failedTests 1))
				)
			)
		)

	;	Print final results

	(if (eq testNum successTests)
		(print "COMPLETED " testNum " " (if (eq testNum 1) "test" "tests") " successfully.")
		(print "FAILED " failedTests " " (if (eq failedTests 1) "test" "tests") " out of " testNum ".")
		)

	;	Return empty string

	""
	)
