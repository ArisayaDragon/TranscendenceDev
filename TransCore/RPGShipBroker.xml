<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- SHIP BROKER ===============================================================

	This screen allows the player to trade in their ship for a new one.
	
	gData uses the following fields:
	
		maxCount: Maximum number of ships to create.
-->
	
	<DockScreen unid="&dsRPGShipBroker;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		
		<OnScreenInit>
			(block (
				(maxCount (if (@ gData 'maxCount) (@ gData 'maxCount) (random 3 5)))
				(shipIDList (objGetData gSource "shipBroker:list"))
				)
				
				;	If there are no ships in our list, then we need to create some
				
				(if (not shipIDList)
					(setq shipIDList (rpgCreateShipsToSell gSource maxCount))
					)
					
				;	Select the first ship in the list
				
				(scrSetData gScreen 'selIndex 0)
				(scrSetData gScreen 'selData (@ shipIDList 0))
				)
		</OnScreenInit>
		
		<Display type="carouselSelector"
				>
			<OnDisplayInit>
				(map (objGetData gSource "shipBroker:list") shipID
					(block (
						(shipObj (objGetObjByID shipID))
						(shipClass (objGetType shipObj))
						)
						{
						title: (objGetName shipObj 'generic)
						icon: (shpGetImageDesc shipClass { rotation:0 })

						largeIcon: (shpGetImageDesc shipClass { type:'schematic })
						details: 
							(or (objFireEvent shipObj 'GetShipDetails { })
								(rpgGetShipDetails shipObj { })
								)

						shipObj: shipObj
						}
						)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theEntry (scrGetListEntry gScreen))
						(selObj (@ theEntry 'shipObj))
						(currency (objGetProperty gSource 'currency))
						
						;	Compute some prices
						
						(playerShipPrice (objGetShipBuyPrice gSource gPlayerShip))
						(newShipPrice (objGetShipSellPrice gSource selObj))
						(tradeInPrice (- newShipPrice playerShipPrice))
						
						;	Compute some descriptions
						
						(newShipDesc (objGetProperty selObj 'playerDesc))
						
						;	Vars
						
						(canBuy Nil)
						)
						
						;	Set the description
						
						(scrSetDesc gScreen
							newShipDesc
							
							"\r\n"
							"\r\n"
						
							(switch
								(not playerShipPrice)
									(scrTranslate gScreen 'descNoTradeIn)
									
								(gr tradeInPrice (objGetBalance gPlayerShip currency))
									(scrTranslate gScreen 'descCantAfford { name:(objGetName selObj 0x04) price:(fmtCurrency currency tradeInPrice) })
									
								(ls tradeInPrice 0)
									(block Nil
										(setq canBuy True)
										(scrTranslate gScreen 'descTradeInRefund { name:(objGetName selObj 0x04) price:(fmtCurrency currency (- tradeInPrice)) })
										)
									
								(block Nil
									(setq canBuy True)
									(scrTranslate gScreen 'descTradeIn { name:(objGetName selObj 0x04) price:(fmtCurrency currency tradeInPrice) })
									)
								)
							)
							
						;	Remember some calculations
						
						(scrSetData gScreen 'tradeInPrice tradeInPrice)
						
						;	Initialize actions
						
						(scrEnableAction gScreen 'actionTradeShip canBuy)
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionTradeShip">
						(block (
							(currency (objGetProperty gSource 'currency))
							(tradeInPrice (scrGetData gScreen 'tradeInPrice))
							
							(shipIDList (objGetData gSource "shipBroker:list"))
							(selData (scrGetData gScreen 'selData))
							(selObj (objGetObjByID selData))
							
							(oldShip gPlayerShip)
							(portPos nil)
							)
							
							;	Move all the cargo from the player's ship to the new ship
							
							(enum (objGetItems gPlayerShip "*U") theItem
								(block ()
									(objRemoveItem gPlayerShip theItem)
									(objAddItem selObj theItem)
									)
								)
								
							;	Remove the ship from our list of ships to sell
							
							(setq shipIDList (filter shipIDList theID (!= theID (objGetID selObj))))
							(objSetData gSource "shipBroker:list" shipIDList)
							
							;	Charge the player
							
							(if (geq tradeInPrice 0)
								(objCharge gPlayerShip currency tradeInPrice)
								(objCredit gPlayerShip currency (- tradeInPrice))
								)
								
							;	Trade ships
							
							(objResume selObj)
							(plyChangeShip gPlayer selObj)
							
							;	The old ship is suspended and possibly available for sale
							;	(But only if we can sell it).
							
							(if (objGetShipSellPrice gSource oldShip)
								(objSuspend oldShip)
									
								;	Otherwise, we temporarily dock here and eventually leave.
								
								(block ()
									(shpCancelOrders oldShip)
									(shpOrder oldShip 'dock gSource)
									(shpOrder oldShip 'wait (random 10 15))
									(shpOrder oldShip 'gate)
									)
								)
								
							;	Position the new ship near a docking port
							
							(setq portPos
								(@	(random
										(filter (objGetProperty gSource 'dockingPorts) portDesc
											(= (@ portDesc 'status) 'empty)
											)
										)
									'pos
									)
								)
							(if portPos
								(objSetPos selObj portPos)
								)
								
							(scrExitScreen gScreen)
							)
					</Action>
					<Action id="actionDone">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionTradeShip">[T]rade Ship</Text>
			
			<Text id="descTradeIn">
				You can trade in your ship and purchase %name% for %price%.
			</Text>
			<Text id="descTradeInRefund">
				This ship is not as good as yours, but if you want to trade yours in, we'll pay you %price%.
			</Text>
			<Text id="descNoTradeIn">
				Unfortunately, we cannot offer you a trade-in because your ship is worthless to us.
			</Text>
			<Text id="descCantAfford">
				You can trade in your ship and purchase %name% for %price%.
				Unfortunately, you cannot afford the cost.
			</Text>
		</Language>
	</DockScreen>
	
<!-- GLOBALS -->
	
	<Globals>
		(block Nil
			(setq rpgCreateShipsToSell (lambda (sellerObj maxCount)
				(block (
					(shipObj Nil)
					(shipList Nil)
					(extraList Nil)
					(shipIDList Nil)

					;	Make a list of all possible ship classes that we sell.

					(allClasses (typFind "s +shipBroker;"))

					;	Filter out any ship classes that we do not sell

					(classesForSale (filter allClasses theClass (objGetShipSellPrice sellerObj { shipClass:theClass })))

					;	Now create a list of types to create. Some types are duplicated if
					;	the class has variants (i.e., different device load-outs).

					(shipsToCreate 
						(apply append
							(map classesForSale theClass
								(if (typGetProperty theClass 'hasVariants)
									(map (make 'sequence (random 1 3)) i theClass)
									(list theClass)
									)
								)
							)
						)
					)

					(dbgOutput shipsToCreate)
					
					;	Create a list of ships to sell
					
					(setq shipList
						(map shipsToCreate 'excludeNil theClass
							(switch
						
								;	Create a ship of this class
								;	(If that fails, for some reason, then we skip it.
							
								(not (setq shipObj (sysCreateShip theClass (objGetPos sellerObj) (objGetSovereign sellerObj))))
									Nil
							
								;	If we don't sell this kind of ship, then skip it.
							
								(not (objGetShipSellPrice sellerObj shipObj))
									(block Nil
										(objDestroy shipObj)
										Nil
										)
									
								;	Otherwise, return it
							
								shipObj
								)
							)
						)
						
					;	Shuffle them
					
					(shuffle shipList)
					
					;	Split the list in two, with the second list being extra
					;	ships that we don't need.
					
					(setq extraList (subset shipList maxCount))
					(setq shipList (subset shipList 0 maxCount))
					
					;	Delete the extra ones
					
					(enum extraList shipObj (objDestroy shipObj))
					
					;	Suspend the ships
					
					(enum shipList shipObj (objSuspend shipObj))
					
					;	Store the list of ID with the seller object
					
					(setq shipIDList (map shipList shipObj (objGetID shipObj)))
					(objSetData sellerObj "shipBroker:list" shipIDList)
					
					;	Return it
					
					shipIDList
					)
				))

			(setq rpgGetShipDetails (lambda (shipObj options)
				(block (
					(showDevices (not (@ options 'noDevices)))

					;	Reactor stats
					
					(reactorItem (@ (objGetItems shipObj "rI") 0))
					(reactorText (if reactorItem (itmGetName reactorItem 0x00) (cat (objGetName shipObj 0x80) " reactor")))
					(reactorIcon (if reactorItem (itmGetImageDesc reactorItem) (resCreateImageDesc &rsItems1; 288 288 96 96)))
					(reactorPowerText (fmtNumber 'power (objGetProperty shipObj 'power)))
					(reactorEfficiency (objGetProperty shipObj 'fuelEfficiencyBonus))
					(reactorEfficiencyText
						(switch
							(gr reactorEfficiency 0)
								(cat "+" reactorEfficiency "%")
										
							(ls reactorEfficiency 0)
								(cat reactorEfficiency "%")
										
							"standard"
							)
						)
					(reactorFuel
						(map 
							(map (itmGetTypes "f -notForSale; -notStandardFuel; -notStandard;") 'excludeNil fuelType 
								(if (shpIsFuelCompatible shipObj (itmCreate fuelType 1))
									(itmCreate fuelType 1)
									)
								)
							(list 'reduceMin 'original)
							fuelItem
							(itmGetLevel fuelItem)
							)
						)
						
					;	Drive Stats
					
					(driveItem (@ (objGetItems shipObj "vI") 0))
					(driveText (if driveItem (itmGetName driveItem 0x00) (cat (objGetName shipObj 0x80) " drive")))
					(driveIcon (if driveItem (itmGetImageDesc driveItem) (resCreateImageDesc &rsItems1; 96 384 96 96)))
					
					;	Cargo Stats
					
					(cargoItem (@ (objGetItems shipObj "cI") 0))
					(cargoIcon (if cargoItem (itmGetImageDesc cargoItem) (resCreateImageDesc &rsItems1; 96 192 96 96)))

					;	Armor

					(armorItem (@ (objGetItems shipObj "aI") 0))

					;	Shields

					(shieldItem (@ (objGetItems shipObj "sI") 0))

					;	Weapons

					(allWeapons (objGetItems shipObj "w~lI"))
					(weaponItem1 (@ allWeapons 0))
					(weaponItem2 (@ allWeapons 1))

					;	Launcher

					(launcherItem (@ (objGetItems shipObj "lI") 0))
					
					;	Slots
					
					(deviceSlots (objGetProperty shipObj 'deviceSlots))
					(maxWeaponSlots (objGetProperty shipObj 'deviceSlotsWeapons))
					(maxNonWeaponSlots (objGetProperty shipObj 'deviceSlotsNonWeapons))
					(availDeviceSlots (objGetProperty shipObj 'availableDeviceSlots))
					(availWeaponSlots (objGetProperty shipObj 'availableWeaponSlots))
					(availNonWeaponSlots (objGetProperty shipObj 'availableNonWeaponSlots))
					)

					(list 
						{
						icon: (shpGetImageDesc (objGetType shipObj) 0)
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; manufacturer:} " (objGetProperty shipObj 'manufacturer) "\n"
									"{/f:MediumBold;/c:#79828c; size:} " (objGetProperty shipObj 'size) " meters\n"
									"{/f:MediumBold;/c:#79828c; mass:} " (objGetProperty shipObj 'hullMass) " tons\n"
								"}"
								)
						}

						{
						icon: reactorIcon
						title: reactorText
						desc: 
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; max. output:} " reactorPowerText "\n"
									"{/f:MediumBold;/c:#79828c; fuel:} " (itmGetName reactorFuel 0x02) "\n"
									"{/f:MediumBold;/c:#79828c; fuel efficiency:} " reactorEfficiencyText "\n"
								"}"
								)
						}
						
						{
						icon: driveIcon
						title: driveText
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; max. speed:} " (fmtNumber 'speed (objGetProperty shipObj 'maxSpeed)) "\n"
									"{/f:MediumBold;/c:#79828c; thrust//mass:} " (/ (objGetProperty shipObj 'thrustToWeight) 1000) "\n"
									"{/f:MediumBold;/c:#79828c; maneuverability:} " (/ (objGetProperty shipObj 'maneuver) 1000) "\n"
								"}"
								)
						}

						{
						icon: cargoIcon
						title: (if cargoItem (itmGetName cargoItem 0))
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; cargo space:} " (fmtNumber (objGetProperty shipObj 'cargoSpace)) " tons\n"
									"{/f:MediumBold;/c:#79828c; max. expansion:} " (objGetProperty shipObj 'maxCargoSpace) " tons\n"
								"}"
								)
						}
						
						(if showDevices
							{
							icon: (itmGetImageDesc armorItem)
							title: (itmGetName armorItem 'short)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel armorItem) "\n"
										"{/f:MediumBold;/c:#79828c; max. armor:} " (/ (objGetProperty shipObj 'maxArmorMass) 1000) " tons\n"
									"}"
									)
							}
							{
							icon: (itmGetImageDesc armorItem)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; max. armor:} " (/ (objGetProperty shipObj 'maxArmorMass) 1000) " tons\n"
									"}"
									)
							}
							)

						(if (and shieldItem showDevices) {
							icon: (itmGetImageDesc shieldItem)
							title: (itmGetName shieldItem 'short)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel shieldItem) "\n"
									"}"
									)
							})

						(if (and weaponItem1 showDevices) {
							icon: (itmGetImageDesc weaponItem1)
							title: (itmGetName weaponItem1 'short)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel weaponItem1) "\n"
									"}"
									)
							})

						(if (and weaponItem2 showDevices) {
							icon: (itmGetImageDesc weaponItem2)
							title: (itmGetName weaponItem2 'short)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel weaponItem2) "\n"
									"}"
									)
							})

						(if (and launcherItem showDevices) {
							icon: (itmGetImageDesc launcherItem)
							title: (itmGetName launcherItem 'short)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel launcherItem) "\n"
									"}"
									)
							})

						{
						icon: (resCreateImageDesc &rsItems1; 96 768 96 96)
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; device slots:} " deviceSlots " (" availDeviceSlots " free)\n"
							
									(if (!= deviceSlots maxWeaponSlots)
										(cat "{/f:MediumBold;/c:#79828c; for weapons:} " maxWeaponSlots " (" availWeaponSlots " free)\n")
										)
									(if (!= deviceSlots maxNonWeaponSlots)
										(cat "{/f:MediumBold;/c:#79828c; for non-weapons:} " maxNonWeaponSlots " (" availNonWeaponSlots " free)\n") 
										)
								"}"
								)
						})
					)
				))
				
			(setq rpgSetShipStatsDisplay (lambda (shipObj options)
				(block (
					;	Reactor stats
					
					(reactorItem (@ (objGetItems shipObj "rI") 0))
					(reactorText (if reactorItem (itmGetName reactorItem 0x00) (cat (objGetName shipObj 0x80) " reactor")))
					(reactorPowerText (fmtNumber 'power (objGetProperty shipObj 'power)))
					(reactorEfficiency (objGetProperty shipObj 'fuelEfficiencyBonus))
					(reactorEfficiencyText
						(switch
							(gr reactorEfficiency 0)
								(cat "+" reactorEfficiency "%")
										
							(ls reactorEfficiency 0)
								(cat reactorEfficiency "%")
										
							"standard"
							)
						)
					(reactorFuel
						(map 
							(map (itmGetTypes "f -notForSale; -notStandardFuel; -notStandard;") 'excludeNil fuelType 
								(if (shpIsFuelCompatible shipObj (itmCreate fuelType 1))
									(itmCreate fuelType 1)
									)
								)
							(list 'reduceMin 'original)
							fuelItem
							(itmGetLevel fuelItem)
							)
						)
						
					;	Drive Stats
					
					(driveItem (@ (objGetItems shipObj "vI") 0))
					(driveText (if driveItem (itmGetName driveItem 0x00) (cat (objGetName shipObj 0x80) " drive")))
					
					;	Cargo Stats
					
					(cargoItem (@ (objGetItems shipObj "cI") 0))
					
					;	Slots
					
					(deviceSlots (objGetProperty shipObj 'deviceSlots))
					(maxWeaponSlots (objGetProperty shipObj 'deviceSlotsWeapons))
					(maxNonWeaponSlots (objGetProperty shipObj 'deviceSlotsNonWeapons))
					(availDeviceSlots (objGetProperty shipObj 'availableDeviceSlots))
					(availWeaponSlots (objGetProperty shipObj 'availableWeaponSlots))
					(availNonWeaponSlots (objGetProperty shipObj 'availableNonWeaponSlots))
					)
					
					;	Set the background image
						
					(scrSetBackgroundImage gScreen {
						type: 'schematic
						obj: shipObj
						})
						
					;	Set the left column of stats

					(scrSetDisplayText gScreen 'leftCol
						(cat
							"{/rtf "
								"{/f:MediumBold;/c:#79828c; reactor:} " reactorText "\n"
								"{/f:MediumBold;/c:#79828c; max. output:} " reactorPowerText "\n"
								"{/f:MediumBold;/c:#79828c; fuel:} " (itmGetName reactorFuel 0x02) "\n"
								"{/f:MediumBold;/c:#79828c; fuel efficiency:} " reactorEfficiencyText "\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; drive:} " driveText "\n"
								"{/f:MediumBold;/c:#79828c; max. speed:} " (fmtNumber 'speed (objGetProperty shipObj 'maxSpeed)) "\n"
								"{/f:MediumBold;/c:#79828c; thrust//mass:} " (/ (objGetProperty shipObj 'thrustToWeight) 1000) "\n"
								"{/f:MediumBold;/c:#79828c; maneuverability:} " (/ (objGetProperty shipObj 'maneuver) 1000) "\n"
							"}"
							)
						)
						
					;	Set the right column of stats
					
					(scrSetDisplayText gScreen 'rightCol
						(cat
							"{/rtf "
								(if cargoItem (cat "{/f:MediumBold;/c:#79828c; cargo:} " (itmGetName cargoItem 0x00) "\n"))
								"{/f:MediumBold;/c:#79828c; cargo space:} " (fmtNumber (objGetProperty shipObj 'cargoSpace)) " tons\n"
								"{/f:MediumBold;/c:#79828c; max. expansion:} " (objGetProperty shipObj 'maxCargoSpace) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; device slots:} " deviceSlots " (" availDeviceSlots " free)\n"
							
								(if (!= deviceSlots maxWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for weapons:} " maxWeaponSlots " (" availWeaponSlots " free)\n")
									)
								(if (!= deviceSlots maxNonWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for non-weapons:} " maxNonWeaponSlots " (" availNonWeaponSlots " free)\n") 
									)
								"\n"
								"{/f:MediumBold;/c:#79828c; max. armor:} " (/ (objGetProperty shipObj 'maxArmorMass) 1000) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; manufacturer:} " (objGetProperty shipObj 'manufacturer) "\n"
								"{/f:MediumBold;/c:#79828c; size:} " (objGetProperty shipObj 'size) " meters\n"
								"{/f:MediumBold;/c:#79828c; mass:} " (objGetProperty shipObj 'hullMass) " tons\n"
							"}"
							)
						)
					)
				))
			)
	</Globals>
	
</TranscendenceModule>
