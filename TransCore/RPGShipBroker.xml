<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- SHIP BROKER ===============================================================

	This screen allows the player to trade in their ship for a new one.
	
	gData uses the following fields:
	
		maxCount: Maximum number of ships to create.
-->
	
	<DockScreen unid="&dsRPGShipBroker;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		
		<OnScreenInit>
			(block (
				(maxCount (if (@ gData 'maxCount) (@ gData 'maxCount) (random 3 5)))
				(shipIDList (objGetData gSource "shipBroker:list"))
				)
				
				;	If there are no ships in our list, then we need to create some
				
				(if (not shipIDList)
					(setq shipIDList (rpgCreateShipsToSell gSource maxCount))
					)
					
				;	Select the first ship in the list
				
				(scrSetData gScreen 'selIndex 0)
				(scrSetData gScreen 'selData (@ shipIDList 0))
				)
		</OnScreenInit>
		
		<Display>
			<Text id="leftCol"	left="0" right="0" top="280" bottom="0" align="left" font="Medium" color="#daebff"/>
			<Text id="rightCol"	left="0" right="0" top="280" bottom="0" align="right" font="Medium" color="#daebff"/>
		</Display>
		
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(selData (scrGetData gScreen 'selData))
						(selObj (objGetObjByID selData))
						)
						
						(rpgSetShipStatsDisplay selObj { })
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionDone">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>
	
<!-- GLOBALS -->
	
	<Globals>
		(block Nil
			(setq rpgCreateShipsToSell (lambda (sellerObj maxCount)
				(block (
					(shipObj Nil)
					(shipList Nil)
					(extraList Nil)
					(shipIDList Nil)
					)
					
					;	Create a list of ships to sell
					
					(setq shipList
						(map (typFind "s +isPlayerClass:true;") 'excludeNil theClass
							(switch
						
								;	Create a ship of this class
								;	(If that fails, for some reason, then we skip it.
							
								(not (setq shipObj (sysCreateShip theClass (objGetPos sellerObj) (objGetSovereign sellerObj))))
									Nil
							
								;	If we don't sell this kind of ship, then skip it.
							
								(not (objGetShipSellPrice sellerObj shipObj))
									(block Nil
										(objDestroy shipObj)
										Nil
										)
									
								;	Otherwise, return it
							
								shipObj
								)
							)
						)
						
					;	Shuffle them
					
					(shuffle shipList)
					
					;	Split the list in two, with the second list being extra
					;	ships that we don't need.
					
					(setq extraList (subset shipList maxCount))
					(setq shipList (subset shipList 0 maxCount))
					
					;	Delete the extra ones
					
					(enum extraList shipObj (objDestroy shipObj))
					
					;	Suspend the ships
					
					(enum shipList shipObj (objSuspend shipObj))
					
					;	Store the list of ID with the seller object
					
					(setq shipIDList (map shipList shipObj (objGetID shipObj)))
					(objSetData sellerObj "shipBroker:list" shipIDList)
					
					;	Return it
					
					shipIDList
					)
				))
				
			(setq rpgSetShipStatsDisplay (lambda (shipObj options)
				(block (
					;	Reactor stats
					
					(reactorItem (@ (objGetItems shipObj "rI") 0))
					(reactorText (if reactorItem (itmGetName reactorItem 0x00) (cat (objGetName shipObj 0x80) " reactor")))
					(reactorPower (divide (if reactorItem (objGetItemProperty shipObj reactorItem 'power) (objGetProperty shipObj 'power)) 1000))
					(reactorPowerText
						(switch
							(gr reactorPower 1000)
								(cat (divide reactorPower 1000) "." (divide (modulo reactorPower 1000) 100) " GW")
								
							(cat reactorPower " MW")
							)
						)
					(reactorFuel
						(map 
							(map (itmGetTypes "f -notForSale; -notStandardFuel; -notStandard;") 'excludeNil fuelType 
								(if (shpIsFuelCompatible shipObj (itmCreate fuelType 1))
									(itmCreate fuelType 1)
									)
								)
							(list 'reduceMin 'original)
							fuelItem
							(itmGetLevel fuelItem)
							)
						)
						
					;	Drive Stats
					
					(driveItem (@ (objGetItems shipObj "vI") 0))
					(driveText (if driveItem (itmGetName driveItem 0x00) (cat (objGetName shipObj 0x80) " drive")))
					
					;	Cargo Stats
					
					(cargoItem (@ (objGetItems shipObj "cI") 0))
					
					;	Slots
					
					(deviceSlots (objGetProperty shipObj 'deviceSlots))
					(maxWeaponSlots (objGetProperty shipObj 'deviceSlotsWeapons))
					(maxNonWeaponSlots (objGetProperty shipObj 'deviceSlotsNonWeapons))
					(availDeviceSlots (objGetProperty shipObj 'availableDeviceSlots))
					(availWeaponSlots (objGetProperty shipObj 'availableWeaponSlots))
					(availNonWeaponSlots (objGetProperty shipObj 'availableNonWeaponSlots))
					)
					
					;	Set the background image
						
					(scrSetBackgroundImage gScreen {
						type: 'object
						obj: shipObj
						})
						
					;	Set the left column of stats

					(scrSetDisplayText gScreen 'leftCol
						(cat
							"{/rtf "
								"{/f:MediumBold;/c:#79828c; reactor:} " reactorText "\n"
								"{/f:MediumBold;/c:#79828c; max. output:} " reactorPowerText "\n"
								"{/f:MediumBold;/c:#79828c; fuel:} " (itmGetName reactorFuel 0x02) "\n"
								"{/f:MediumBold;/c:#79828c; efficiency:} " (objGetProperty shipObj 'fuelEfficiency) "\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; drive:} " driveText "\n"
								"{/f:MediumBold;/c:#79828c; max. speed:} ." (objGetProperty shipObj 'maxSpeed) "c\n"
								"{/f:MediumBold;/c:#79828c; thrust//mass:} " (/ (objGetProperty shipObj 'thrustToWeight) 1000) "\n"
								"{/f:MediumBold;/c:#79828c; maneuverability:} " (/ (objGetProperty shipObj 'maneuver) 1000) "\n"
							"}"
							)
						)
						
					;	Set the right column of stats
					
					(scrSetDisplayText gScreen 'rightCol
						(cat
							"{/rtf "
								(if cargoItem (cat "{/f:MediumBold;/c:#79828c; cargo:} " (itmGetName cargoItem 0x00) "\n"))
								"{/f:MediumBold;/c:#79828c; cargo space:} " (objGetProperty shipObj 'cargoSpace) " tons\n"
								"{/f:MediumBold;/c:#79828c; max. expansion:} " (objGetProperty shipObj 'maxCargoSpace) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; device slots:} " deviceSlots " (" availDeviceSlots " free)\n"
							
								(if (!= deviceSlots maxWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for weapon:} " maxWeaponSlots " (" availWeaponSlots " free)\n")
									)
								(if (!= deviceSlots maxNonWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for non-weapon:} " maxNonWeaponSlots " (" availNonWeaponSlots " free)\n") 
									)
								"\n"
								"{/f:MediumBold;/c:#79828c; max. armor:} " (/ (objGetProperty shipObj 'maxArmorMass) 1000) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; manufacturer:} " (objGetProperty shipObj 'manufacturer) "\n"
								"{/f:MediumBold;/c:#79828c; size:} " (objGetProperty shipObj 'size) " meters\n"
								"{/f:MediumBold;/c:#79828c; mass:} " (objGetProperty shipObj 'hullMass) " tons\n"
							"}"
							)
						)
					)
				))
			)
	</Globals>
	
</TranscendenceModule>
