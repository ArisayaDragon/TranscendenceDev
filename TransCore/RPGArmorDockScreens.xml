<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- ARMOR MANAGEMENT SCREEN ===================================================

	This screen allows the player to repair and upgrade armor at a station. It 
	requires the station to use the <RepairArmor> directive in its <Trade> 
	section.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.
	
	'noUpgrade: If True, do not offer to see upgrades.
	
	'sourceObj: If not Nil, use this as the object for inventory purposes.
	
	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageArmor;"
			type=				"armorSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"asI"

			initialItem="=(block (
				(desiredSeg (scrGetData gScreen 'armorSeg))
				(seg
					(switch
						(not (scrGetItem gScreen))
							'shields
							
						(itmMatches (scrGetItem gScreen) 's)
							'shields
							
						(itmGetArmorInstalledLocation (scrGetItem gScreen))
						)
					)
				)

				(or (not desiredSeg) (eq seg desiredSeg))
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(actionStatus Nil)
						)
						
						(switch
							;	If no item is selected we assume that we have an empty
							;	shield generator slot.
							
							(not theItem)
								(block (
									(desc Nil)
									(canInstall Nil)
									)
									
									(scrSetControlValue gScreen 'currentItem {
										title: "Shield Generator Slot"
										desc: "Your ship does not have a shield generator installed."
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Install action
									
									(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionReplace Nil)
									(scrShowAction gScreen 'actionDisable Nil)
									(scrShowAction gScreen 'actionEnable Nil)
									(scrShowAction gScreen 'actionRemove Nil)
									)
								
							;	If this is the shield generator...
							
							(eq (itmGetProperty theItem 'category) 'shields)
								(block (
									;	Shield state
									
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									
									(desc Nil)
									(canEnable Nil)
									(canDisable Nil)
									)
									
									(setq desc (cat (itmGetName theItem 0x0021) " installed."))
									
									;	Set the description
								
									(scrSetControlValue gScreen 'currentItem {
										source: gPlayerShip
										item: theItem
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
								
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem { category:'shields criteria:"sUN" }))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
									
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
										
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionDisable canDisable)
									(scrShowAction gScreen 'actionEnable canEnable)
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, we expect armor...
							
							(block (
								)
								
								; Remember the armor segment so that we can come back to 
								; this same selection (e.g., when we go to replace armor)

								(scrSetData gScreen 'armorSeg (itmGetArmorInstalledLocation theItem))
								
								;	Repair armor action
								
								(setq actionStatus (rpgCalcDockServiceRepairAction gSource theShip theItem { category:'armor }))
								(scrShowAction gScreen 'actionRepair (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionRepair (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionRepair (@ actionStatus 'desc))
								(scrSetData gScreen 'costToRepair (@ actionStatus 'cost))
								
								;	Do we have any armor segments in cargo hold that we can use
								;	to replace this armor?
								
								(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem { category:'armor criteria:"aU" }))
								(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
								
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem { category:'armor criteria:"aU" }))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
								
								;	Set the description
								
								(scrSetControlValue gScreen 'currentItem {
									source: gPlayerShip
									item: theItem
									})
								
								;	Enable/disable various actions
								
								(scrShowAction gScreen 'actionDisable Nil)
								(scrShowAction gScreen 'actionEnable Nil)
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionInstall Nil)
								)
							)
							
						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionRepair">
						(block Nil
							(objRepairArmor gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRepair))
							(typSetData &svPlayer; 'tutorialRepaired True)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionUpgrade">
						(switch
							;	If this is an armor item, then offer to sell an upgrade
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGUpgradeArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									sourceObj: (@ gData 'sourceObj)
									})
									
							;	Otherwise, assume shields
							
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: "sUN"
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								sourceObj: (@ gData 'sourceObj)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: "sUN"
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>
					
					<Action id="actionReplace">
						(switch
							;	If this is an armor item, then offer to replace it.
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGReplaceArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
									
							;	If shields, replace
							
							(itmMatches (scrGetItem gScreen) "s")
								(scrShowScreen gScreen &dsRPGInstallDevice; {
									criteria: "sUN"
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
							)
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDisable">Disa[b]le</Text>
			<Text id="actionEnable">Ena[b]le</Text>
			<Text id="actionInstall">[I]nstall</Text>
			<Text id="actionRemove">Remo[v]e</Text>
			<Text id="actionRepair">[R]epair</Text>
			<Text id="actionReplace">Re[p]lace</Text>
			<Text id="actionUpgrade">Buy [U]pgrade</Text>
			
			<Text id="descArmorNotDamaged">The ship's %armorNoun% is not damaged.</Text>
			<Text id="descArmorNoTech">The ship's %armorNoun% cannot be repaired. The technology required is not available at this station.</Text>
			<Text id="descArmorCantRepair">The ship's %armorNoun% cannot be repaired at this station.</Text>
			<Text id="descArmorTooMuchDamage">The ship's %armorNoun% is heavily damaged and cannot be repaired.</Text>
			<Text id="descArmorCantAfford">The ship's %armorNoun% can be repaired for %cost%, which, unfortunately, is more than you can afford.</Text>
			<Text id="descArmorFreeRepair">The ship's %armorNoun% is damaged and can be repaired free of charge.</Text>
			<Text id="descArmorRepair">The ship's %armorNoun% is damaged and will cost %cost% to repair.</Text>
		</Language>
	</DockScreen>
	
<!-- MISC DEVICES MANAGEMENT SCREEN ============================================

	This screen allows the player to install miscellaneous devices, including
	reactor, drive, and cargo hold.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'sourceObj: If not Nil, use this as the object for inventory purposes.
	
	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageMiscDevices;"
			type=				"miscSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"d~wsI"
			initialItem="=(rpgSelectorInitialItem &quot;d~wsI&quot;)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						
						(deviceTable {
							cargoHold: {
								category: 'cargoHold
								criteria: "cUN"
								}
								
							device: {
								category: 'device
								criteria: "d~wscrv UN"
								}
								
							drive: {
								category: 'drive
								criteria: "vUN"
								}
								
							reactor: {
								category: 'reactor
								criteria: "rUN"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						(actionStatus Nil)
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
									
									;	Refuel action
									
									(setq actionStatus (rpgCalcReactorRefuelAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionRefuel (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRefuel (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRefuel (@ actionStatus 'desc))
									(scrSetData gScreen 'fuelCost (@ actionStatus 'cost))
									(scrSetData gScreen 'fuelItem (@ actionStatus 'fuelItem))
									(scrSetData gScreen 'fuelMax (@ actionStatus 'maxCount))
									(scrSetData gScreen 'fuelNeeded (@ actionStatus 'maxNeeded))
									(scrSetData gScreen 'fuelAfford (@ actionStatus 'maxAfford))
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
									
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
									
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
										
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableNonWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotPosIndex:(@ (scrGetListEntry gScreen) 'slotPosIndex) })
								
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
								
								;	Install action
									
								(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip categoryDesc))
								(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
								
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionRefuel Nil)
								(scrShowAction gScreen 'actionReplace Nil)
								)
							)
							
						;	Enable/disable various actions

						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)

						;	Show the previous action (either weapons or armor)
						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionRefuel">
						(switch
							;	If refueling from cargo, bring up the screen
							
							(= gSource gPlayerShip)
								(scrShowScreen gScreen &dsManualRefuel;)
								
							;	If free fuel, refuel now
							
							(= (scrGetData gScreen 'fuelCost) 0)
								(block Nil
									(setq itemsToUse (itmCreate (itmGetType (scrGetData gScreen 'fuelItem)) (scrGetData gScreen 'fuelNeeded)))
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(scrRefreshScreen gScreen)
									)
									
							;	Otherwise, purchase fuel
								
							(scrShowPane gScreen "RefuelShip")
							)
					</Action>
					
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected 
									{ 
										oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
										slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
										}
									)
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								sourceObj: (@ gData 'sourceObj)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected 
								{ 
									oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
									slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
									}
								)
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDisable">Disa[b]le</Text>
			<Text id="actionEnable">Ena[b]le</Text>
			<Text id="actionInstall">[I]nstall</Text>
			<Text id="actionRemove">Remo[v]e</Text>
			<Text id="actionRefuel">[R]efuel</Text>
			<Text id="actionReplace">Re[p]lace</Text>
			<Text id="actionUpgrade">Buy [U]pgrade</Text>
			
			<Text id="descItemInstalled">
				(cat
					(itmGetName (@ gData 'item) 0x0021) " installed."
					)
			</Text>
			
			<Text id="slotTitle:cargoHold">Cargo Expansion Slot</Text>
			<Text id="slotDesc:cargoHold">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a cargo expansion. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(cat
						"Your ship does not have a cargo expansion installed.\n\n"
					
						"Cargo expansions can be installed to increase the carrying "
						"capacity of your ship."
						)
					)
			</Text>
			
			<Text id="slotTitle:device">Device Slot</Text>
			<Text id="slotDesc:device">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for miscellaneous devices. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing miscellaneous "
							"devices."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing miscellaneous "
						"devices."
						)
					)
			</Text>
			
			<Text id="slotTitle:drive">Drive Upgrade Slot</Text>
			<Text id="slotDesc:drive">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a drive upgrade. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(cat
						"Your ship does not have a drive upgrade installed.\n\n"
					
						"Drive upgrades can be installed to increase the thrust and velocity "
						"of your ship."
						)
					)
			</Text>
			
			<Text id="slotTitle:reactor">Reactor Slot</Text>
			<Text id="slotDesc:reactor">Your ship does not have a reactor installed.</Text>
		</Language>
	</DockScreen>
	
<!-- WEAPONS MANAGEMENT SCREEN =================================================

	This screen allows the player to install weapons.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'sourceObj: If not Nil, use this as the object for inventory purposes.
	
	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageWeapons;"
			type=				"weaponsSelector"
			inherit=			"&dsRPGDockServicesBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"wI"
			initialItem="=(rpgSelectorInitialItem &quot;wI&quot;)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)

						(requiresAmmo Nil)
						(canBuyAmmo Nil)
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						
						(deviceTable {
							weapon: {
								category: 'weapon
								criteria: "pUN"
								ammoLabel: "actionBuyAmmo"
								}
								
							launcher: {
								category: 'launcher
								criteria: "lUN"
								ammoLabel: "actionBuyMissiles"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									(actionStatus Nil)
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
									
									;	Buy ammo action
									
									(setq actionStatus (rpgCalcDockServiceBuyAmmo gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionBuyAmmo (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionBuyAmmo (@ actionStatus 'enabled))
									(scrSetActionLabel gScreen 'actionBuyAmmo (scrTranslate gScreen (@ categoryDesc 'ammoLabel)))
									(scrSetActionDesc gScreen 'actionBuyAmmo (@ actionStatus 'desc))
									
									;	Upgrade action
									
									(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
									(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))
										
									;	Remove action
									
									(setq actionStatus (rpgCalcDockServiceRemoveAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionRemove (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionRemove (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionRemove (@ actionStatus 'desc))
									(scrSetData gScreen 'costToRemove (@ actionStatus 'cost))
									
									;	Replace action
									
									(setq actionStatus (rpgCalcDockServiceReplaceAction gSource theShip theItem categoryDesc))
									(scrShowAction gScreen 'actionReplace (@ actionStatus 'visible))
									(scrEnableAction gScreen 'actionReplace (@ actionStatus 'enabled))
									(scrSetActionDesc gScreen 'actionReplace (@ actionStatus 'desc))
									
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
										
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotPosIndex:(@ (scrGetListEntry gScreen) 'slotPosIndex) })
								
								;	Cannot buy ammo/missiles
								
								(scrShowAction gScreen 'actionBuyAmmo Nil)
						
								;	Upgrade action
									
								(setq actionStatus (rpgCalcDockServiceUpgradeAction gSource theShip theItem categoryDesc))
								(scrShowAction gScreen 'actionUpgrade (and (not (@ gData 'noUpgrade)) (@ actionStatus 'visible)))
								(scrEnableAction gScreen 'actionUpgrade (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionUpgrade (@ actionStatus 'desc))

								;	Install action
									
								(setq actionStatus (rpgCalcDockServiceInstallAction gSource theShip categoryDesc))
								(scrShowAction gScreen 'actionInstall (@ actionStatus 'visible))
								(scrEnableAction gScreen 'actionInstall (@ actionStatus 'enabled))
								(scrSetActionDesc gScreen 'actionInstall (@ actionStatus 'desc))
								
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionReplace Nil)
								)
							)
							
						;	Enable/disable various actions
								
						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)

						;	Page up/page down
						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionBuyAmmo">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy; {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							criteria: (cat "m +launchedBy:" (itmGetType (scrGetItem gScreen)) ";")
							sourceObj: (@ gData 'sourceObj)
							})
					</Action>
					
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected 
									{ 
										oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
										slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
										}
									)
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								sourceObj: (@ gData 'sourceObj)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected 
								{ 
									oldSlots: (map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem))
									slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
									}
								)
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								slotPosIndex: (@ (scrGetListEntry gScreen) 'slotPosIndex)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowPane gScreen "RemoveDevice")
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionBuyAmmo">Buy [A]mmo</Text>
			<Text id="actionBuyMissiles">Buy [M]issiles</Text>
			<Text id="actionDisable">Disa[b]le</Text>
			<Text id="actionEnable">Ena[b]le</Text>
			<Text id="actionInstall">[I]nstall</Text>
			<Text id="actionRemove">Remo[v]e</Text>
			<Text id="actionReplace">Re[p]lace</Text>
			<Text id="actionUpgrade">Buy [U]pgrade</Text>
			
			<Text id="slotTitle:launcher">Launcher Slot</Text>
			<Text id="slotDesc:launcher">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for a launcher. "
							"(However, some launchers do not require a free slot to be installed.)"
							)
							
					"Your ship does not have a missile launcher installed."
					)
			</Text>
			
			<Text id="slotTitle:weapon">Weapon Slot</Text>
			<Text id="slotDesc:weapon">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for weapons. "
							"(However, some weapons do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing weapons."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing weapons."
						)
					)
			</Text>
		</Language>
	</DockScreen>
	
<!-- REPLACE ARMOR SCREEN ======================================================

	This screen allows the player to replace armor from a station. It requires 
	the station to use the <ReplaceArmor> directive in its <Trade> section.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGReplaceArmor;"
			type=				"itemPicker"
			inherit=		"&dsRPGUpgradeArmor;"
			nestedScreen=		"true"
			>

		<OnScreenInit>
			(scrSetData gScreen 'installCostOnly True)
		</OnScreenInit>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			>
			(block (
				(criteria (or (@ gData 'criteria) "aU"))
				(armorSeg (@ gData 'armorSeg))
				(armorToReplace (shpGetArmor gPlayerShip armorSeg))
				)
				
				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not armorToReplace)
							(not (itmIsEqual theItem armorToReplace 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<Panes>
		</Panes>

		<Language>
			<Text id="actionBuyAndInstall">[I]nstall this Armor</Text>

			<Text id="descReplaceArmorDefault">
				Pick an armor segment to install.
			</Text>
		</Language>
	</DockScreen>

<!-- UPGRADE ARMOR SCREEN ======================================================

	This screen allows the player to buy and replace and armor segment from the
	current station.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

	'sourceObj: If not Nil, use this as the object for inventory purposes.
-->

	<DockScreen UNID="&dsRPGUpgradeArmor;"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
				dataFrom=	"=(or (@ gData 'sourceObj) 'source)"
				list=		"*"
				>
			(scrSetListFilter gScreen (lambda (theItem)
				(and
					(itmMatches theItem "aU")
					(objGetSellPrice gSource theItem)
					(objGetArmorReplacePrice gSource theItem)
					(geq (itmGetLevel theItem) (itmGetLevel (shpGetArmor gPlayerShip (@ gData 'armorSeg))))
					(!= (@ (objCanInstallItem gPlayerShip theItem) 1) 'notCompatible)
					)
				))
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(armorSeg (@ gData 'armorSeg))
						(thisItem (scrGetItem gScreen))
						(oldItem (shpGetArmor gPlayerShip armorSeg))
						(currencyUsed (objGetDefaultCurrency gSource))
						
						(result (if thisItem (objCanInstallItem gPlayerShip thisItem armorSeg)))
						(resultCode (@ result 1))

						(installStatus (objGetItemProperty gSource thisItem 'installItemStatus))

						(totalCost (if (scrGetData gScreen 'installCostOnly)
							(objGetArmorReplacePrice gSource thisItem)
							(+ (objGetSellPrice gSource thisItem) (objGetArmorReplacePrice gSource thisItem))
							))
						(cargoNeeded (itmGetMass oldItem))

						(desc Nil)
						(descID Nil)
						(canInstall Nil)
						)

						;	Show the current armor
						
						(scrSetControlValue gScreen 'currentItem {
							source: gPlayerShip
							item: oldItem
							})
						
						;	Tell the player whether we can install the selected item and how 
						;	much it will cost.

						(scrSetData gScreen 'cost totalCost)
						(switch
							(not thisItem)
								(setq descID 'descNoArmorHere)

							(= resultCode 'armorTooHeavy)
								(setq descID 'descArmorTooHeavy)

							(= resultCode 'cannotInstall)
								(setq desc (@ result 2))

							(and (@ gData 'checkMilitaryID) 
									(itmHasAttribute thisItem "Military")
									(not (objGetItems gPlayerShip "*+MilitaryID"))
									)
								(setq descID descNeedMilitaryID)

							(and (@ gData 'checkMilitaryID) 
									(itmHasAttribute thisItem "Illegal")
									)
								(setq descID 'descArmorIllegal)

							(!= resultCode 'ok)
								(setq descID 'descCannotInstall)

							(not (@ installStatus 'canInstall))
								(setq desc (or
									(objTranslate gSource (@ installStatus 'descID) { item:thisItem targetObj:gPlayerShip })
									(scrTranslate gScreen 'descNoTech { armorShort:(itmGetName thisItem 'short) })
									))

							(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
								(setq descID 'descNotEnoughRoom)
							
							(gr totalCost (objGetBalance gPlayerShip currencyUsed))
								(setq descID 'descCannotAfford)
								
							(= totalCost 0)
								(block Nil
									(setq descID 'descFreeInstall)
									(setq canInstall True)
									)
								
							;	Otherwise, we're OK to install
								
							(block Nil
								(setq descID 'descInstall)
								(setq canInstall True)
								)
							)

						;	If the new segment is of a lower level than the current
						;	segment, then warn the player
						(if canInstall
							(switch
								(gr (itmGetLevel oldItem) (itmGetLevel thisItem))
									(scrSetControlValueTranslate gScreen 'descWarning 'descWarningLevel {
										armorShort:(itmGetName oldItem 'short)
										})
								)
							)

						;	Set the description
						(if descID
							(scrSetDescTranslate gScreen descID {
								armor:thisItem
								armorPlural:(itmGetName thisItem 'plural)
								armorArticle:(itmGetName thisItem 'article)
								armorShort:(itmGetName thisItem 'short)
								cost:(fmtCurrency currencyUsed totalCost)
								})
							(scrSetDesc gScreen desc)
							)
						
						;	Enable/disable actions
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>
				
				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (
							(thisItem (scrRemoveItem gScreen 1))
							(currencyUsed (objGetDefaultCurrency gSource))
							)

							(objAddItem gPlayerShip thisItem 1)
							(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
							(objCharge gPlayerShip currencyUsed (scrGetData gScreen 'cost))

							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	
		<Language>
			<Text id="actionBuyAndInstall">[B]uy and Install</Text>

			<Text id="descNoArmorHere">The station doesn't have any armor segments to install.</Text>
			<Text id="descArmorTooHeavy">%ArmorPlural are too heavy for your ship's hull.</Text>
			<Text id="descNeedMilitaryID">You must have a military ID to install %armorShort%.</Text>
			<Text id="descArmorIllegal">We do not install illegal armor.</Text>
			<Text id="descCannotInstall">This armor segment cannot be installed.</Text>
			<Text id="descNoTech">We do not have the technology to install %armorShort%.</Text>
			<Text id="descNotEnoughRoom">

				There isn't enough room in your cargo hold to store your old 
				armor segment. Sell or jettison cargo to make room.

			</Text>
			<Text id="descCannotAfford">We can install %armorArticle% for %cost%. Unfortunately, you cannot afford the cost.</Text>
			<Text id="descFreeInstall">We can install %armorArticle% free of charge.</Text>
			<Text id="descInstall">We can install %armorArticle% for %cost%.</Text>

			<Text id="descWarningLevel">Note: Your currently installed %armorShort% is higher level.</Text>
		</Language>
	</DockScreen>

<!-- BASE CLASSES -->

	<DockScreen unid="&dsRPGDockServicesBase;"
			inherit=		"&dsDockScreenBase;"
			>
		<Panes>
			<RefuelShip>
				<OnPaneInit>
					(block (
						(currencyUsed (objGetDefaultCurrency gSource))
						)
						
						(scrSetControlValue gScreen 'currentItem {
							source: gSource
							item: (scrGetData gScreen 'fuelItem)
							})
							
						(scrSetDescTranslate gScreen 'descRefuelConfirm {
							item: (scrGetData gScreen 'fuelItem) 
							cost: (fmtCurrency currencyUsed (scrGetData gScreen 'fuelCost))
							totalCost: (fmtCurrency currencyUsed (multiply (scrGetData gScreen 'fuelCost) (scrGetData gScreen 'fuelMax)))
							needed: (scrGetData gScreen 'fuelNeeded)
							afford: (scrGetData gScreen 'fuelAfford)
							})
							
						(scrSetCounter gScreen (scrGetData gScreen 'fuelMax))
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Counter id="counter"/>
				</Controls>

				<Actions>
					<Action id="actionRefuel" default="1">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count (scrGetData gScreen 'fuelMax))
								(scrSetCounter gScreen (scrGetData gScreen 'fuelMax))
								
								(block (itemsToUse currencyUsed)
									(setq itemsToUse (itmCreate (itmGetType (scrGetData gScreen 'fuelItem)) count))
									(setq currencyUsed (objGetDefaultCurrency gSource))
									
									(shpRefuelFromItem gPlayerShip itemsToUse)
									
									(objCharge gPlayerShip currencyUsed (multiply count (scrGetData gScreen 'fuelCost)))
									(plyRecordBuyItem gPlayer itemsToUse currencyUsed (multiply count (scrGetData gScreen 'fuelCost)))
									
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</RefuelShip>
			
			<RemoveDevice>
				<OnPaneInit>
					(block Nil
						(scrSetControlValue gScreen 'currentItem {
							source: gPlayerShip
							item: (scrGetItem gScreen)
							})
							
						(scrSetDescTranslate gScreen 'descRemoveDeviceConfirm {
							item: (scrGetItem gScreen) 
							cost: 
								(if (gr (scrGetData gScreen 'costToRemove) 0)
									(fmtCurrency (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRemove))
									)
							})
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionRemove" default="1">
						(block Nil
							(shpRemoveDevice gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRemove))

							(scrRefreshScreen gScreen)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</RemoveDevice>
		</Panes>
		
		<Language>
			<Text id="screenSetShipConfig">Ship Configuration</Text>
			<Text id="screenSetDockServices">Dock Services</Text>
			<Text id="screenSetArmorAndShields">Armor and Shields</Text>
			<Text id="screenSetWeapons">Weapons</Text>
			<Text id="screenMiscDevices">Miscellaneous Devices</Text>

			<Text id="actionArmor:defaultArmorInstall">We install armor segments up to level %maxLevel%.</Text>
			<Text id="actionArmor:defaultArmorRepair">We repair armor up to level %maxLevel%.</Text>
			<Text id="actionArmor:defaultArmorUpgrade">We sell armor upgrades up to level %maxLevel%.</Text>
			<Text id="actionArmor:defaultShieldsInstall">We install shields up to level %maxLevel%.</Text>
			<Text id="actionArmor:defaultShieldsUpgrade">We sell shield upgrades up to level %maxLevel%.</Text>
			<Text id="actionArmor:noTechToRepair">We do not have the technology to repair your armor.</Text>
			<Text id="actionArmor:nothing">We don't upgrade or install armor.</Text>
			<Text id="actionArmor:shipConfig">View and manage armor and shields.</Text>
			
			<Text id="actionBuyAmmo:ammoForSale">We have ammo in stock for %itemName%.</Text>
			<Text id="actionBuyAmmo:noAmmoToBuy">We do not have ammo for %itemName%.</Text>
			<Text id="actionBuyMissiles:missilesForSale">We have missiles in stock for %itemName%.</Text>
			<Text id="actionBuyMissiles:noMissilesToBuy">We do not have missiles for %itemName%.</Text>
			
			<Text id="actionInstall.noDeviceInstall">We do not install devices.</Text>
			<Text id="actionInstall.noDeviceRemove">We do not remove devices.</Text>
			<Text id="actionInstall:noItemInCargo">
				(or
					(scrTranslate gScreen (cat "actionInstall:noItemInCargo:" (@ gData 'category)))
					(scrTranslate gScreen "actionInstall:noItemInCargo:device")
					)
			</Text>
			<Text id="actionInstall:noItemInCargo:cargoHold">You do not have any cargo expansions in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:drive">You do not have any drive upgrades in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:launcher">You do not have any launchers in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:reactor">You do not have any reactors in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:shields">You do not have any shield generators in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:weapon">You do not have any weapons in your cargo hold.</Text>
			<Text id="actionInstall:noItemInCargo:device">You do not have any devices in your cargo hold.</Text>

			<Text id="actionInstall:noCompatibleItemInCargo">
				(or
					(scrTranslate gScreen (cat "actionInstall:noCompatibleItemInCargo:" (@ gData 'category)))
					(scrTranslate gScreen "actionInstall:noCompatibleItemInCargo:device")
					)
			</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:cargoHold">You do not have any compatible cargo expansions in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:drive">You do not have any compatible drive upgrades in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:launcher">You do not have any compatible launchers in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:reactor">You do not have any compatible reactors in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:shields">You do not have any compatible shield generators in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:weapon">You do not have any compatible weapons in your cargo hold.</Text>
			<Text id="actionInstall:noCompatibleItemInCargo:device">You do not have any compatible devices in your cargo hold.</Text>

			<Text id="actionInstall:defaultAbility">We install devices up to tech level %maxLevel%.</Text>
			<Text id="actionInstall:upgradeInstallOnly">Sorry, we only install or remove items as part of an upgrade purchase.</Text>
			
			<Text id="actionRefuel:cantAfford">
				(switch
					(= (@ gData 'afford) 0)
						(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ". Unfortunately, you cannot afford even one.")
					
					(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ".")
					)
			</Text>
			<Text id="actionRefuel:noRefuel">
				We do not sell fuel.
			</Text>
			<Text id="actionRefuel:noCompatibleFuel">
				We do not have fuel compatible with your ship's reactor.
			</Text>
			<Text id="actionRefuel:noFuelNeeded">
				Your ship is fully fueled.
			</Text>
			<Text id="actionRefuel:freeRefuel">
				(switch
					(= (@ gData 'needed) 0)
						"We can refuel you free of charge, but your ship does not need any fuel."
						
					(= (@ gData 'needed) 1)
						(cat "We can refuel you free of charge. Your ship needs one " (itmGetName (@ gData 'item) 0x00) ".")
						
					(cat "We can refuel you free of charge. Your ship needs " (@ gData 'needed) " " (itmGetName (@ gData 'item) 0x02) ".")
					)
			</Text>
			<Text id="actionRefuel:refuel">
				(cat "We can refuel your ship for " (@ gData 'cost) " per " (itmGetName (@ gData 'item) 0x00) ".")
			</Text>
			<Text id="actionRefuel:noFuelInCargo">
				You do not have any fuel on board your ship.
			</Text>
			<Text id="actionRefuel:noCompatibleFuelInCargo">
				You do not have any compatible fuel on board your ship.
			</Text>
			<Text id="actionRefuel:refuelFromCargo">
				You have fuel compatible with this reactor.
			</Text>
				
			<Text id="actionRemove:cannotAfford">
				The device can be removed for %cost%. Unfortunately, you cannot afford the cost.
			</Text>
			<Text id="actionRemove:cannotRemove">The device cannot be removed.</Text>
			<Text id="actionRemove:freeRemove">The device can be removed free of charge.</Text>
			<Text id="actionRemove:noRoomInCargo">The device cannot be removed because there is no room in your cargo hold to store it.</Text>
			<Text id="actionRemove.noRoomForCargoHold">Cannot remove cargo expansion because you have too much cargo.</Text>
			<Text id="actionRemove.canOnlyBeReplaced">
				The %itemName% can be replaced, but not removed.
			</Text>
			<Text id="actionRemove:remove">The device can be removed for %cost%.</Text>
			<Text id="actionRemove:upgradeInstallOnly">Sorry, we only install or remove items as part of an upgrade purchase.</Text>
			<Text id="actionRemove:noTech">(cat "We do not have the technology to remove a level " (itmGetLevel (@ gData 'item)) " device.")</Text>
			
			<Text id="actionReplace:cannotReplace">The device cannot be replaced.</Text>
			<Text id="actionReplace:defaultAbility">
				(switch
					(and (= (@ gData 'category) 'armor) (@ gData 'maxLevel))
						(cat 
							"We install armor up to tech level " (objGetProperty (@ gData 'dockObj) 'installArmorMaxLevel) 
							" (but you don't have anything better than level " (@ gData 'maxLevel) " in your cargo hold)."
							)
							
					(@ gData 'maxLevel)
						(cat 
							"We install devices up to tech level " (objGetProperty (@ gData 'dockObj) 'installDeviceMaxLevel)
							" (but you don't have anything better than level " (@ gData 'maxLevel) " in your cargo hold)."
							)
						
					(= (@ gData 'category) 'armor)
						(cat "We install armor up to tech level " (objGetProperty (@ gData 'dockObj) 'installArmorMaxLevel) ".")
						
					(cat "We install devices up to tech level " (objGetProperty (@ gData 'dockObj) 'installDeviceMaxLevel) ".")
					)
			</Text>
			<Text id="actionReplace:noArmorItemInCargo">There is nothing in your cargo hold to replace this armor segment with.</Text>
			<Text id="actionReplace:noDeviceItemInCargo">There is nothing in your cargo hold to replace this device with.</Text>
			<Text id="actionReplace:noTech">(cat "We do not have the technology to replace a level " (itmGetLevel (@ gData 'item)) " device.")</Text>
			<Text id="actionReplace:upgradeInstallOnly">Sorry, we only install or remove items as part of an upgrade purchase.</Text>
			
			<Text id="actionUpgrade:cannotUpgrade">The device cannot be upgraded.</Text>
			<Text id="actionUpgrade:defaultAbility">
				(or
					(scrTranslate gScreen (cat "actionUpgrade:defaultAbility:" (@ gData 'category)))
					(scrTranslate gScreen "actionUpgrade:defaultAbility:device")
					)
			</Text>
			<Text id="actionUpgrade:defaultAbility:armor">We have armor segments in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:cargoHold">We have cargo expansions in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:drive">We have drive upgrades in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:launcher">We have launchers in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:reactor">We have reactors in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:shields">We have shield generators in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:weapon">We have weapons in stock up to tech level %maxLevel%</Text>
			<Text id="actionUpgrade:defaultAbility:device">We have devices in stock up to tech level %maxLevel%</Text>

			<Text id="actionUpgrade:noItemForSale">
				(or
					(scrTranslate gScreen (cat "actionUpgrade:noItemForSale:" (@ gData 'category)))
					(scrTranslate gScreen "actionUpgrade:noItemForSale:device")
					)
			</Text>
			<Text id="actionUpgrade:noItemForSale:armor">We do not have any armor segments for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:cargoHold">We do not have any cargo expansions for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:drive">We do not have any drive upgrades for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:launcher">We do not have any launchers for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:reactor">We do not have any reactors for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:shields">We do not have any shield generators for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:weapon">We do not have any weapons for sale.</Text>
			<Text id="actionUpgrade:noItemForSale:device">We do not have any devices for sale.</Text>

			<Text id="actionUpgrade:noItemUpgrade">
				(scrTranslate gScreen (cat "actionUpgrade:noItemUpgrade:" (@ gData 'category)) gData)
			</Text>
			<Text id="actionUpgrade:noItemUpgrade:armor">We do not have anything better than your level %itemLevel% armor.</Text>
			<Text id="actionUpgrade:noItemUpgrade:cargoHold">We do not have anything better than your level %itemLevel% cargo expansion.</Text>
			<Text id="actionUpgrade:noItemUpgrade:drive">We do not have anything better than your level %itemLevel% drive upgrade.</Text>
			<Text id="actionUpgrade:noItemUpgrade:launcher">We do not have anything better than your level %itemLevel% launcher.</Text>
			<Text id="actionUpgrade:noItemUpgrade:reactor">We do not have anything better than your level %itemLevel% reactor.</Text>
			<Text id="actionUpgrade:noItemUpgrade:shields">We do not have anything better than your level %itemLevel% shields.</Text>
			<Text id="actionUpgrade:noItemUpgrade:weapon">We do not have anything better than your level %itemLevel% weapon.</Text>
			<Text id="actionUpgrade:noItemUpgrade:device">We do not have anything better than your level %itemLevel% device.</Text>
			<Text id="actionUpgrade:noTech">We do not have the technology to upgrade a level %itemLevel% device.</Text>
		
			<Text id="descRefuelConfirm">
				(switch
					(and (gr (@ gData 'needed) (@ gData 'afford)) (= (@ gData 'afford) 1))
						(cat "Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) ". You can only afford a single one.")
						
					(gr (@ gData 'needed) (@ gData 'afford))
						(cat "Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) ". "
						"You can only afford " (@ gData 'afford) " " (itmGetName (@ gData 'item) 0x02) ". How many do you wish to buy?"
						)

					(= (@ gData 'needed) 1)
						(cat "Your ship needs one " (itmGetName (@ gData 'item) 0x00) " for a total cost of " (@ gData 'cost) ".")
						
					(cat "Your ship needs " (@ gData 'needed) " " (itmGetName (@ gData 'item) 0x02) ". "
						"Each " (itmGetName (@ gData 'item) 0x00) " costs " (@ gData 'cost) " (" (@ gData 'totalCost) " total). How many do you wish to buy?"
						)
					)
			</Text>
			
			<Text id="descRemoveDeviceConfirm">
				(switch
					(not (@ gData 'cost))
						(cat "We can remove " (itmGetName (@ gData 'item) 0x04) " free of charge. Are you sure you wish to continue?")
						
					(cat "We can remove " (itmGetName (@ gData 'item) 0x04) " for " (@ gData 'cost) ". Are you sure you wish to continue?")
					)
			</Text>
			
			<Text id="rpg.cannotInstallArmorBecauseNotCompatible">
				This armor segment is not compatible with your ship.
			</Text>
			<Text id="rpg.cannotInstallDeviceBecauseNotCompatible">
				This device is not compatible with your ship.
			</Text>
			<Text id="rpg.noCompatibleDeviceInCargo">
				(or
					(scrTranslate gScreen (cat "rpg.noCompatibleDeviceInCargo:" (@ gData 'category)))
					(scrTranslate gScreen "rpg.noCompatibleDeviceInCargo:device")
					)
			</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:cargoHold">You do not have any compatible cargo expansions in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:drive">You do not have any compatible drive upgrades in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:launcher">You do not have any compatible launchers in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:reactor">You do not have any compatible reactors in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:shields">You do not have any compatible shield generators in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:weapon">You do not have any compatible weapons in your cargo hold.</Text>
			<Text id="rpg.noCompatibleDeviceInCargo:device">You do not have any compatible devices in your cargo hold.</Text>
		</Language>
	</DockScreen>
	
</TranscendenceModule>
