<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- ARMOR MANAGEMENT SCREEN ===================================================

	This screen allows the player to repair and upgrade armor at a station. It 
	requires the station to use the <RepairArmor> directive in its <Trade> 
	section.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.
	
	'noUpgrade: If True, do not offer to see upgrades.
	
	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageArmor;"
			type=				"armorSelector"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(block (
				(desiredSeg (scrGetData gScreen 'armorSeg))
				(seg
					(switch
						(not (scrGetItem gScreen))
							'shields
							
						(itmMatches (scrGetItem gScreen) 's)
							'shields
							
						(itmGetArmorInstalledLocation (scrGetItem gScreen))
						)
					)
				)

				(or (not desiredSeg) (eq seg desiredSeg))
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						)
						
						(switch
							;	If no item is selected we assume that we have an empty
							;	shield generator slot.
							
							(not theItem)
								(block (
									(desc Nil)
									(canInstall Nil)
									(canUpgrade Nil)
									)
									
									(scrSetDesc gScreen "")
									(scrSetControlValue gScreen 'currentItem {
										title: "Shield Generator Slot"
										desc: "Your ship does not have a shield generator installed."
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Do we have any shield generators in cargo hold that we can use
									;	to replace this generator?
								
									(setq canInstall
										(and (objGetItems theShip "sUN")
											)
										)
									
									;	Does this station have any shields that we can purchase?
								
									(setq canUpgrade
										(and (not (@ gData 'noUpgrade))
											(filter (objGetItems gSource "sUN") theItemToBuy
												(and (objGetSellPrice gSource theItemToBuy)
														(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
														)
												)
											)
										)
								
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionReplace Nil)
									(scrShowAction gScreen 'actionInstall canInstall)
									(scrShowAction gScreen 'actionUpgrade canUpgrade)
									(scrShowAction gScreen 'actionDisable Nil)
									(scrShowAction gScreen 'actionEnable Nil)
									(scrShowAction gScreen 'actionRemove Nil)
									)
								
							;	If this is the shield generator...
							
							(eq (itmGetProperty theItem 'category) 'shields)
								(block (
									;	Shield state
									
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									
									(desc Nil)
									(canEnable Nil)
									(canDisable Nil)
									(canRemove Nil)
									(canReplace Nil)
									(canUpgrade Nil)
									)
									
									(setq desc (cat (itmGetName theItem 0x0021) " installed."))
									
									;	Set the description
								
									(scrSetDesc gScreen desc)
									(scrSetControlValue gScreen 'currentItem {
										source: gPlayerShip
										item: theItem
										})
									
									;	Remember that we have the shield generator selected

									(scrSetData gScreen 'armorSeg 'shields)
									
									;	Do we have any shield generators in cargo hold that we can use
									;	to replace this generator?
								
									(setq canReplace
										(filter (objGetItems theShip "sUN") theItemInCargo
											(and
												(not (itmIsEqual theItemInCargo theItem 'ignoreInstalled))
												(objGetItemProperty gSource theItemInCargo 'installDevicePrice)
												)
											)
										)
									
									;	Does this station have any shields that we can purchase?
								
									(setq canUpgrade
										(and (not (@ gData 'noUpgrade))
											(filter (objGetItems gSource "sUN") theItemToBuy
												(and (objGetSellPrice gSource theItemToBuy)
														(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
														(not (itmIsEqual theItemToBuy theItem 'ignoreInstalled))
														(geq (itmGetLevel theItemToBuy) (itmGetLevel theItem))
														)
												)
											)
										)
								
									;	Can we remove the shields?
								
									(setq canRemove
										(and (not (@ gData 'upgradeInstallOnly))
											(objGetItemProperty gSource theItem 'removeDevicePrice)
											)
										)
									
									;	Enable/disable various actions
								
									(scrShowAction gScreen 'actionRepair Nil)
									(scrShowAction gScreen 'actionReplace canReplace)
									(scrShowAction gScreen 'actionUpgrade canUpgrade)
									(scrShowAction gScreen 'actionDisable isEnabled)
									(scrShowAction gScreen 'actionEnable (not isEnabled))
									(scrShowAction gScreen 'actionRemove canRemove)
									(scrShowAction gScreen 'actionInstall Nil)
									)
									
							;	Otherwise, we expect armor...
							
							(block (
							
								;	Figure out the damage on the armor
								
								(damage (objGetArmorDamage theShip theItem))
								(maxHP (shpGetArmorMaxHitPoints theShip theItem))
								
								;	Figure out how much it would cost to repair
								
								(currencyUsed (objGetDefaultCurrency gSource))
								(costToRepair (objGetArmorRepairPrice gSource theItem damage))
								
								(armorNoun (cat (objGetArmorName theShip theItem) " " (itmGetName theItem 0)))
								(desc Nil)
								(canRepair Nil)
								(canReplace Nil)
								(canUpgrade Nil)
								)
								
								; Remember the armor segment so that we can come back to 
								; this same selection (e.g., when we go to replace armor)

								(scrSetData gScreen 'armorSeg (itmGetArmorInstalledLocation theItem))
								
								;	Set a descriptor describing the amount of damage and the cost
								;	of repairs
								
								(switch
									(eq damage 0)
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorNotDamaged { armorNoun:armorNoun }))

									(gr (itmGetProperty theItem 'repairLevel) (objGetProperty gSource 'repairArmorMaxLevel))
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorNoTech { armorNoun:armorNoun }))
										
									(not costToRepair)
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorCantRepair { armorNoun:armorNoun }))

									(ls (subtract maxHP damage) (divide maxHP 4))
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorTooMuchDamage { armorNoun:armorNoun }))

									(ls (objGetBalance gPlayerShip currencyUsed) costToRepair)
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorCantAfford { armorNoun:armorNoun cost:(fmtCurrency currencyUsed costToRepair) }))

									(eq costToRepair 0)
										(block Nil
											(setq desc (typTranslate &dsRPGManageArmor; 'descArmorFreeRepair { armorNoun:armorNoun }))
											(scrSetData gScreen 'costToRepair 0)
											(setq canRepair True)
											)

									(block Nil
										(setq desc (typTranslate &dsRPGManageArmor; 'descArmorRepair { armorNoun:armorNoun cost:(fmtCurrency currencyUsed costToRepair) }))
										(scrSetData gScreen 'costToRepair costToRepair)
										(setq canRepair True)
										)
									)
									
								;	Do we have any armor segments in cargo hold that we can use
								;	to replace this armor?
								
								(setq canReplace
									(filter (objGetItems theShip "aU") theItemInCargo
										(not (itmIsEqual theItemInCargo theItem 'ignoreInstalled))
										)
									)
									
								;	Does this station have any armor segments that we can purchase?
								
								(setq canUpgrade
									(and (not (@ gData 'noUpgrade))
										(filter (objGetItems gSource "aU") theItemToBuy
											(and (objGetSellPrice gSource theItemToBuy)
													(objGetArmorReplacePrice gSource theItemToBuy)
													(not (itmIsEqual theItemToBuy theItem 'ignoreInstalled))
													(geq (itmGetLevel theItemToBuy) (itmGetLevel theItem))
													)
											)
										)
									)
									
								;	Set the description
								
								(scrSetDesc gScreen desc)
								(scrSetControlValue gScreen 'currentItem {
									source: gPlayerShip
									item: theItem
									})
								
								;	Enable/disable various actions
								
								(scrEnableAction gScreen 'actionRepair canRepair)
								(scrShowAction gScreen 'actionReplace canReplace)
								(scrShowAction gScreen 'actionUpgrade canUpgrade)
								(scrShowAction gScreen 'actionDisable Nil)
								(scrShowAction gScreen 'actionEnable Nil)
								(scrShowAction gScreen 'actionRemove Nil)
								(scrShowAction gScreen 'actionInstall Nil)
								)
							)
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionRepair">
						(block Nil
							(objRepairArmor gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) (scrGetData gScreen 'costToRepair))
							(typSetData &svPlayer; 'tutorialRepaired True)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionUpgrade">
						(switch
							;	If this is an armor item, then offer to sell an upgrade
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGUpgradeArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
									
							;	Otherwise, assume shields
							
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: "sUN"
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: "sUN"
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>
					
					<Action id="actionReplace">
						(switch
							;	If this is an armor item, then offer to replace it.
							
							(itmMatches (scrGetItem gScreen) "a")
								(scrShowScreen gScreen &dsRPGReplaceArmor; {
									armorSeg: (scrGetData gScreen 'armorSeg)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
									
							;	If shields, replace
							
							(itmMatches (scrGetItem gScreen) "s")
								(scrShowScreen gScreen &dsRPGInstallDevice; {
									criteria: "sUN"
									checkMilitaryID: (@ gData 'checkMilitaryID)
									})
							)
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowScreen gScreen &dsRPGRemoveDevice; {
							shipObj: gPlayerShip
							dockObj: gSource
							deviceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionRepair">"[R]epair"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="descArmorNotDamaged">(cat "The ship's " (@ gData 'armorNoun) " is not damaged.")</Text>
			<Text id="descArmorNoTech">(cat "The ship's " (@ gData 'armorNoun) " cannot be repaired. The technology required is not available at this station.")</Text>
			<Text id="descArmorCantRepair">(cat "The ship's " (@ gData 'armorNoun) " cannot be repaired at this station.")</Text>
			<Text id="descArmorTooMuchDamage">(cat "The ship's " (@ gData 'armorNoun) " is heavily damaged and cannot be repaired.")</Text>
			<Text id="descArmorCantAfford">(cat "The ship's " (@ gData 'armorNoun) " can be repaired for " (@ gData 'cost) ", which, unfortunately, is more than you can afford.")</Text>
			<Text id="descArmorFreeRepair">(cat "The ship's " (@ gData 'armorNoun) " is damaged and can be repaired free of charge.")</Text>
			<Text id="descArmorRepair">(cat "The ship's " (@ gData 'armorNoun) " is damaged and will cost " (@ gData 'cost) " to repair.")</Text>
		</Language>
	</DockScreen>
	
<!-- MISC DEVICES MANAGEMENT SCREEN ============================================

	This screen allows the player to install miscellaneous devices, including
	reactor, drive, and cargo hold.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageMiscDevices;"
			type=				"miscSelector"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"d~wsI"
			initialItem="=(block (
			
				;	deviceSelected is a struct with one of the following fields:
				;		slotCategory: This means we should select a slot of 
				;			this category.
				;		installPos: This means we should select a device in this
				;			install position.
				;		installCategory: This means we should select a device 
				;			with this category (or an empty slot with this
				;			category).
				;		oldSlots: This means that we select the item that was
				;			most recently installed (and thus is NOT on this list
				;			of old devices).
				
				(deviceSelected (scrGetData gScreen 'deviceSelected))
				)
				
				(switch
					(not deviceSelected)
						True
						
					(@ deviceSelected 'slotCategory)
						(eq (@ deviceSelected 'slotCategory) (if (not (scrGetItem gScreen)) (@ (scrGetListEntry gScreen) 'category)))
						
					(@ deviceSelected 'installPos)
						(eq (@ deviceSelected 'installPos) (if (scrGetItem gScreen) (itmGetInstallPos (scrGetItem gScreen))))
						
					(@ deviceSelected 'installCategory)
						(eq (@ deviceSelected 'installCategory) (if (scrGetItem gScreen) (itmGetProperty (scrGetItem gScreen) 'category) (@ (scrGetListEntry gScreen) 'category)))
						
					(@ deviceSelected 'oldSlots)
						(and (scrGetItem gScreen) 
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos (scrGetItem gScreen))))
							)
						
					True
					)
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						(canRemove Nil)
						(canReplace Nil)
						(canUpgrade Nil)
						
						(deviceTable {
							cargoHold: {
								criteria: "cUN"
								}
								
							device: {
								criteria: "d~wscrv UN"
								}
								
							drive: {
								criteria: "vUN"
								}
								
							reactor: {
								criteria: "rUN"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
										
									;	Does this station have any items that we can purchase?
								
									(setq canUpgrade
										(and
											(not (@ gData 'noUpgrade))
											(not (eq category 'device))
											(filter (objGetItems gSource (@ categoryDesc 'criteria)) theItemToBuy
												(and (objGetSellPrice gSource theItemToBuy)
														(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
														(not (itmIsEqual theItemToBuy theItem 'ignoreInstalled))
														(geq (itmGetLevel theItemToBuy) (itmGetLevel theItem))
														)
												)
											)
										)
										
									;	Can we remove the item?
								
									(setq canRemove	
										(and (not (@ gData 'upgradeInstallOnly))
											(not (eq category 'reactor))
											(objGetItemProperty gSource theItem 'removeDevicePrice)
											)
										)
									
									;	Do we have any devices in cargo hold that we can use
									;	to replace this device?
								
									(setq canReplace
										(filter (objGetItems theShip (@ categoryDesc 'criteria)) theItemInCargo
											(and
												(objGetItemProperty gSource theItemInCargo 'installDevicePrice)
												(not (itmIsEqual theItemInCargo theItem 'ignoreInstalled))
												)
											)
										)
										
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableNonWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotCategory:category })
								
								;	Do we have any devices to install from cargo hold?

								(setq canInstall 
									(objGetItems theShip (@ categoryDesc 'criteria))
									)
								
								;	Does this station have any items that we can purchase?
								
								(setq canUpgrade
									(and (not (@ gData 'noUpgrade))
										(filter (objGetItems gSource (@ categoryDesc 'criteria)) theItemToBuy
											(and (objGetSellPrice gSource theItemToBuy)
													(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
													)
											)
										)
									)
								)
							)
							
						;	Enable/disable various actions
								
						(scrShowAction gScreen 'actionReplace canReplace)
						(scrShowAction gScreen 'actionInstall canInstall)
						(scrShowAction gScreen 'actionUpgrade canUpgrade)
						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)
						(scrShowAction gScreen 'actionRemove canRemove)
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected { oldSlots:(map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem)) })
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected { oldSlots:(map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem)) })
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowScreen gScreen &dsRPGRemoveDevice; {
							shipObj: gPlayerShip
							dockObj: gSource
							deviceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="descItemInstalled">
				(cat
					(itmGetName (@ gData 'item) 0x0021) " installed."
					)
			</Text>
			
			<Text id="slotTitle:cargoHold">"Cargo Hold Slot"</Text>
			<Text id="slotDesc:cargoHold">
				(cat
					"Your ship does not have a cargo hold upgrade installed.\n\n"
					
					"Cargo hold upgrade can be installed to increase the carrying "
					"capacity of your ship."
					)
			</Text>
			
			<Text id="slotTitle:device">"Device Slot"</Text>
			<Text id="slotDesc:device">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for miscellaneous devices. "
							"(However, some devices do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing miscellaneous "
							"devices."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing miscellaneous "
						"devices."
						)
					)
			</Text>
			
			<Text id="slotTitle:drive">"Drive Slot"</Text>
			<Text id="slotDesc:drive">
				(cat
					"Your ship does not have a drive upgrade installed.\n\n"
					
					"Drive upgrades can be installed to increase the thrust and velocity "
					"of your ship."
					)
			</Text>
			
			<Text id="slotTitle:reactor">"Reactor Slot"</Text>
			<Text id="slotDesc:reactor">"Your ship does not have a reactor installed."</Text>
		</Language>
	</DockScreen>
	
<!-- WEAPONS MANAGEMENT SCREEN =================================================

	This screen allows the player to install weapons.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

	'upgradeInstallOnly: If True, we only offer device installation services if
			the player buys an upgrade.
	
-->

	<DockScreen UNID="&dsRPGManageWeapons;"
			type=				"weaponsSelector"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"wI"
			initialItem="=(block (
			
				;	deviceSelected is a struct with one of the following fields:
				;		slotCategory: This means we should select a slot of 
				;			this category.
				;		installPos: This means we should select a device in this
				;			install position.
				;		installCategory: This means we should select a device 
				;			with this category (or an empty slot with this
				;			category).
				;		oldSlots: This means that we select the item that was
				;			most recently installed (and thus is NOT on this list
				;			of old devices).
				
				(deviceSelected (scrGetData gScreen 'deviceSelected))
				)
				
				(switch
					(not deviceSelected)
						True
						
					(@ deviceSelected 'slotCategory)
						(eq (@ deviceSelected 'slotCategory) (if (not (scrGetItem gScreen)) (@ (scrGetListEntry gScreen) 'category)))
						
					(@ deviceSelected 'installPos)
						(eq (@ deviceSelected 'installPos) (if (scrGetItem gScreen) (itmGetInstallPos (scrGetItem gScreen))))
						
					(@ deviceSelected 'installCategory)
						(eq (@ deviceSelected 'installCategory) (if (scrGetItem gScreen) (itmGetProperty (scrGetItem gScreen) 'category) (@ (scrGetListEntry gScreen) 'category)))
						
					(@ deviceSelected 'oldSlots)
						(and (scrGetItem gScreen) 
							(not (find (@ deviceSelected 'oldSlots) (itmGetInstallPos (scrGetItem gScreen))))
							)
						
					True
					)
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)

						(requiresAmmo Nil)
						(canBuyAmmo Nil)
						(canDisable Nil)
						(canEnable Nil)
						(canInstall Nil)
						(canRemove Nil)
						(canReplace Nil)
						(canUpgrade Nil)
						
						(deviceTable {
							weapon: {
								criteria: "pUN"
								ammoLabel: "actionBuyAmmo"
								}
								
							launcher: {
								criteria: "lUN"
								ammoLabel: "actionBuyMissiles"
								}
							})
							
						(category (if theItem (itmGetProperty theItem 'category) (@ (scrGetListEntry gScreen) 'category)))
						(categoryDesc (@ deviceTable category))
						)
						
						(scrSetData gScreen 'categoryCriteria (@ categoryDesc 'criteria))
						
						;	Figure out desc, etc.
						
						(switch
							;	If we have an item then this is an installed device

							theItem
								(block (
									(isEnabled (objGetItemProperty theShip theItem 'enabled))
									)
								
									(scrSetControlValue gScreen 'currentItem {
										source: theShip
										item: theItem
										})
										
									;	Remember selection
									
									(scrSetData gScreen 'deviceSelected { installPos:(itmGetInstallPos theItem) })
									
									;	Does this weapon require ammo? Does this station have
									;	ammo to sell?
									
									(setq requiresAmmo (itmGetProperty theItem 'ammoType))
									(setq canBuyAmmo 
										(and requiresAmmo 
											(filter (objGetItems gSource (cat "m +launchedBy:" (itmGetType theItem) ";")) theItemToBuy
												(objGetSellPrice gSource theItemToBuy)
												)
											)
										)
										
									;	Does this station have any items that we can purchase?
								
									(setq canUpgrade
										(and
											(not (eq category 'device))
											(not (@ gData 'noUpgrade))
											(filter (objGetItems gSource (@ categoryDesc 'criteria)) theItemToBuy
												(and (objGetSellPrice gSource theItemToBuy)
														(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
														(not (itmIsEqual theItemToBuy theItem 'ignoreInstalled))
														(geq (itmGetLevel theItemToBuy) (itmGetLevel theItem))
														)
												)
											)
										)
										
									;	Can we remove the item?
								
									(setq canRemove	
										(and (not (@ gData 'upgradeInstallOnly))
											(objGetItemProperty gSource theItem 'removeDevicePrice)
											)
										)
									
									;	Do we have any devices in cargo hold that we can use
									;	to replace this device?
								
									(setq canReplace
										(filter (objGetItems theShip (@ categoryDesc 'criteria)) theItemInCargo
											(and
												(objGetItemProperty gSource theItemInCargo 'installDevicePrice)
												(not (itmIsEqual theItemInCargo theItem 'ignoreInstalled))
												)
											)
										)
										
									;	Enable disable?

									(if (objGetItemProperty theShip theItem 'canBeDisabled)
										(block Nil
											(setq canDisable isEnabled)
											(setq canEnable (not isEnabled))
											)
										)
									)
									
							;	Otherwise, this is an empty slot, so we display something
							;	based on the item category
							
							(block (
								)
								
								;	Set description
								
								(scrSetControlValue gScreen 'currentItem {
									title: (scrTranslate gScreen (cat "slotTitle:" category))
									desc: (scrTranslate gScreen (cat "slotDesc:" category) {
										slotsAvail: (objGetProperty theShip 'availableWeaponSlots)
										})
									})
									
								;	Remember selection
									
								(scrSetData gScreen 'deviceSelected { slotCategory:category })
								
								;	Do we have any devices to install from cargo hold?

								(setq canInstall 
									(objGetItems theShip (@ categoryDesc 'criteria))
									)
								
								;	Does this station have any items that we can purchase?
								
								(setq canUpgrade
									(and (not (@ gData 'noUpgrade))
										(filter (objGetItems gSource (@ categoryDesc 'criteria)) theItemToBuy
											(and (objGetSellPrice gSource theItemToBuy)
													(objGetItemProperty gSource theItemToBuy 'installDevicePrice)
													)
											)
										)
									)
								)
							)
							
						;	Enable/disable various actions
								
						(scrShowAction gScreen 'actionBuyAmmo requiresAmmo)
						(scrEnableAction gScreen 'actionBuyAmmo canBuyAmmo)
						(scrSetActionLabel gScreen 'actionBuyAmmo (scrTranslate gScreen (@ categoryDesc 'ammoLabel)))
						
						(scrShowAction gScreen 'actionReplace canReplace)
						(scrShowAction gScreen 'actionInstall canInstall)
						(scrShowAction gScreen 'actionUpgrade canUpgrade)
						(scrShowAction gScreen 'actionDisable canDisable)
						(scrShowAction gScreen 'actionEnable canEnable)
						(scrShowAction gScreen 'actionRemove canRemove)
						)
				</OnPaneInit>
				
				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionBuyAmmo">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy; {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							criteria: (cat "m +launchedBy:" (itmGetType (scrGetItem gScreen)) ";")
							})
					</Action>
					
					<Action id="actionUpgrade">
						(block Nil
							(if (not (scrGetItem gScreen))
								(scrSetData gScreen 'deviceSelected { oldSlots:(map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem)) })
								)
								
							(scrShowScreen gScreen &dsRPGUpgradeDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								replaceItem: (scrGetItem gScreen)
								})
							)
					</Action>
					
					<Action id="actionInstall">
						(block Nil
							;	On return, select either the newly installed item 
							;	or the original slot.
							(scrSetData gScreen 'deviceSelected { oldSlots:(map (objGetItems gPlayerShip "Id") theItem (itmGetInstallPos theItem)) })
						
							(scrShowScreen gScreen &dsRPGInstallDevice; {
								criteria: (scrGetData gScreen 'categoryCriteria)
								checkMilitaryID: (@ gData 'checkMilitaryID)
								})
							)
					</Action>
					
					<Action id="actionReplace">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							criteria: (scrGetData gScreen 'categoryCriteria)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							replaceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionEnable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentEnabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionDisable">
						(block Nil
							(objSetItemProperty gPlayerShip (scrGetItem gScreen) 'enabled 'silentDisabled)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action id="actionRemove">
						(scrShowScreen gScreen &dsRPGRemoveDevice; {
							shipObj: gPlayerShip
							dockObj: gSource
							deviceItem: (scrGetItem gScreen)
							})
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionBuyAmmo">"Buy [A]mmo"</Text>
			<Text id="actionBuyMissiles">"Buy [M]issiles"</Text>
			<Text id="actionDisable">"Disa[b]le"</Text>
			<Text id="actionEnable">"Ena[b]le"</Text>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="actionRemove">"Remo[v]e"</Text>
			<Text id="actionReplace">"Re[p]lace"</Text>
			<Text id="actionUpgrade">"Buy [U]pgrade"</Text>
			
			<Text id="slotTitle:launcher">"Launcher Slot"</Text>
			<Text id="slotDesc:launcher">"Your ship does not have a missile launcher installed."</Text>
			
			<Text id="slotTitle:weapon">"Weapon Slot"</Text>
			<Text id="slotDesc:weapon">
				(switch
					(eq (@ gData 'slotsAvail) 0)
						(cat
							"There are no free slots available for weapons. "
							"(However, some weapons do not require a free slot to be installed.)"
							)
							
					(eq (@ gData 'slotsAvail) 1)
						(cat
							"Your ship has a free slot available for installing weapons."
							)
							
					(cat
						"Your ship has " (@ gData 'slotsAvail) " free slots available for installing weapons."
						)
					)
			</Text>
		</Language>
	</DockScreen>
	
<!-- REMOVE DEVICE SCREEN ======================================================

	This screen allows the player to remove a currently installed device.

	gData uses the following fields:

	shipObj: The object from which we are removing the device.
	dockObj: The object that is removing the device.
	deviceItem: The item to remove.
	
-->

	<DockScreen UNID="&dsRPGRemoveDevice;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (@ gData 'deviceItem))
						(theShip (@ gData 'shipObj))
						(theDock (@ gData 'dockObj))
						
						(currencyUsed (objGetDefaultCurrency theDock))
						(costToRemove (objGetItemProperty theDock theItem 'removeDevicePrice))
						
						(result (shpCanRemoveDevice theShip theItem))
						
						(desc Nil)
						(canRemove Nil)
						)
						
						(switch
							(not (isint result))
								(setq desc result)
								
							(not (eq result 0))
								(setq desc "The device cannot be removed.")
								
							(gr (itmGetMass theItem) (objGetCargoSpaceLeft theShip))
								(setq desc (scrTranslate gScreen 'descNoRoomForDevice))
								
							(ls (objGetBalance theShip currencyUsed) costToRemove)
								(setq desc (scrTranslate gScreen 'descRemoveCantAfford { cost:(fmtCurrency currencyUsed costToRemove) }))
								
							(eq costToRemove 0)
								(block Nil
									(setq desc (scrTranslate gScreen 'descRemoveFree))
									(scrSetData gScreen 'cost 0)
									(setq canRemove True)
									)
									
							(block Nil
								(setq desc (scrTranslate gScreen 'descRemove { cost:(fmtCurrency currencyUsed costToRemove) }))
								(scrSetData gScreen 'cost costToRemove)
								(setq canRemove True)
								)
							)
						
						;	Set description
						
						(scrSetDesc gScreen desc)
						
						;	Set actions
						
						(scrEnableAction gScreen 'actionRemove canRemove)
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionRemove" default="1">
						(block (
							(theItem (@ gData 'deviceItem))
							(theShip (@ gData 'shipObj))
							(theDock (@ gData 'dockObj))
							(currencyUsed (objGetDefaultCurrency theDock))
							)
							
							(shpRemoveDevice theShip theItem)
							(objCharge theShip currencyUsed (scrGetData gScreen 'cost))

							(scrExitScreen gScreen)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionRemove">"[R]emove"</Text>
			
			<Text id="descNoRoomForDevice">"The device cannot be removed because there is no room in your cargo hold to store it."</Text>
			<Text id="descRemoveCantAfford">(cat "The device can be removed for " (@ gData 'cost) ". Unfortunately, you cannot afford the cost.")</Text>
			<Text id="descRemoveFree">"The device can be removed free of charge."</Text>
			<Text id="descRemove">(cat "The device can be removed for " (@ gData 'cost) ".")</Text>
		</Language>
	</DockScreen>

<!-- UPGRADE ARMOR SCREEN ======================================================

	This screen allows the player to buy and replace and armor segment from the
	current station.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGUpgradeArmor;"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
				dataFrom=	"source"
				list=		"*"
				>
			(scrSetListFilter gScreen (lambda (theItem)
				(and
					(itmMatches theItem "aU")
					(objGetSellPrice gSource theItem)
					(objGetArmorReplacePrice gSource theItem)
					(geq (itmGetLevel theItem) (itmGetLevel (shpGetArmor gPlayerShip (@ gData 'armorSeg))))
					)
				))
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(armorSeg (@ gData 'armorSeg))
						(thisItem (scrGetItem gScreen))
						(oldItem (shpGetArmor gPlayerShip armorSeg))
						(currencyUsed (objGetDefaultCurrency gSource))
						
						(result
							(if thisItem
								(objCanInstallItem gPlayerShip thisItem armorSeg)
								(list Nil 'cannotInstall "The station doesn't have any armor segments to install.")
								)
							)
						(resultCode (@ result 1))
						
						(totalCost (add (objGetSellPrice gSource thisItem) (objGetArmorReplacePrice gSource thisItem)))
						(cargoNeeded (itmGetMass oldItem))

						(desc Nil)
						(canInstall Nil)
						)
						
						;	Tell the player whether we can install the selected item and how 
						;	much it will cost.
						
						(switch
							(eq resultCode 'armorTooHeavy)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descArmorTooHeavy { armor:thisItem }))
								
							(eq resultCode 'cannotInstall)
								(setq desc (@ result 2))
								
							(and (@ gData 'checkMilitaryID) 
									(itmHasModifier thisItem "Military")
									(not (objGetItems gPlayerShip "*+MilitaryID"))
									)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descNeedMilitaryID { armor:thisItem }))
								
							(and (@ gData 'checkMilitaryID) 
									(itmHasModifier thisItem "Illegal")
									)
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descArmorIllegal { armor:thisItem }))
								
							(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descNotEnoughRoom))
							
							(gr totalCost (objGetBalance gPlayerShip currencyUsed))
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descCannotAfford { cost:(fmtCurrency currencyUsed totalCost) }))
								
							(eq totalCost 0)
								(block Nil
									(setq desc (typTranslate &dsRPGUpgradeArmor; 'descFreeInstall))
									(scrSetData gScreen 'cost 0)
									(setq canInstall True)
									)
								
							;	Otherwise, we're OK to install
								
							(block Nil
								(setq desc (typTranslate &dsRPGUpgradeArmor; 'descInstall { cost:(fmtCurrency currencyUsed totalCost) }))
								(scrSetData gScreen 'cost totalCost)
								(setq canInstall True)
								)
							)
							
						;	Set the description
						
						(scrSetDesc gScreen desc)
						
						;	Enable/disable actions
						
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (thisItem currencyUsed)
							(setq thisItem (scrGetItem gScreen))
							(setq currencyUsed (objGetDefaultCurrency gSource))
							
							(objRemoveItem gSource thisItem 1)
							(objAddItem gPlayerShip thisItem 1)

							(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
							(objCharge gPlayerShip currencyUsed (scrGetData gScreen 'cost))

							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	
		<Language>
			<Text id="actionBuyAndInstall">"[B]uy and Install"</Text>

			<Text id="descArmorTooHeavy">
				(cat (itmGetName (@ gData 'armor) 0x03) " are too heavy for your ship's hull.")
			</Text>
			<Text id="descNeedMilitaryID">
				(cat "You must have a military ID to install " (itmGetName (@ gData 'armor) 0x80) ".")
			</Text>
			<Text id="descArmorIllegal">
				(cat "We do not install illegal armor.")
			</Text>
			<Text id="descNotEnoughRoom">
				(cat
					"There isn't enough room in your cargo hold to store your old armor segment. "
					"Sell or jettison cargo to make room."
					)
			</Text>
			<Text id="descCannotAfford">
				(cat "You can buy and install this armor segment for " (@ gData 'cost) ". Unfortunately, you cannot afford the cost.")))
			</Text>
			<Text id="descFreeInstall">
				"This armor segment can be installed free of charge."
			</Text>
			<Text id="descInstall">
				(cat "You can buy and install this armor segment for " (@ gData 'cost) ".")))
			</Text>
		</Language>
	</DockScreen>

</TranscendenceModule>
