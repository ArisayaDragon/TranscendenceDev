<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Mined Ore -->

	<StationType UNID="&stMinedOre;"
			name=				"mined ore"
			noArticle=			"true"
			sovereign=			"&svIndependent;"
			dockScreen=			"&dsMinedOre;"

			structuralHitPoints="100"

			scale=				"ship"
			mobile=				"true"
			mass=				"10"
			destroyWhenEmpty=	"true"
			noMapIcon=			"true"
			>

		<ImageVariants>
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="0" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="24" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="48" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="72" imageWidth="24" imageHeight="24" />
		</ImageVariants>
		
		<HeroImage>
			<ImageVariants>
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
			</ImageVariants>
		</HeroImage>

		<DockingPorts
				portCount=		"2"
				portRadius=		"24"
				maxDist=		"3"
				/>

	</StationType>

<!-- TABLES -->

	<ItemTable unid="&tbAsteroidOre;">
		<LocationCriteriaTable>
			<Group criteria="*metallicComp"
				   levelValue="
				  		100,      160,      250,      500,      1000,
					   2000,     4000,     8000,    16000,     32000,
					  64000,   128000,   256000,   512000,   1000000,
					2000000,  4100000,  8200000, 16400000,	32800000"
					>
				<RandomItem criteria="* +ore; -notStandard; +metallicComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*organicComp"
				   levelValue="
				  		100,      160,      250,      500,      1000,
					   2000,     4000,     8000,    16000,     32000,
					  64000,   128000,   256000,   512000,   1000000,
					2000000,  4100000,  8200000, 16400000,	32800000"
					>
				<RandomItem criteria="* +ore; -notStandard; +organicComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*rockyComp"
				   levelValue="
				  		100,      160,      250,      500,      1000,
					   2000,     4000,     8000,    16000,     32000,
					  64000,   128000,   256000,   512000,   1000000,
					2000000,  4100000,  8200000, 16400000,	32800000"
					>
				<RandomItem criteria="* +ore; -notStandard; +rockyComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*waterComp"
				   levelValue="
				  		100,      160,      250,      500,      1000,
					   2000,     4000,     8000,    16000,     32000,
					  64000,   128000,   256000,   512000,   1000000,
					2000000,  4100000,  8200000, 16400000,	32800000"
					>
				<RandomItem criteria="* +ore; -notStandard; +waterComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
		</LocationCriteriaTable>
	</ItemTable>
	
<!-- GLOBAL -->

	<Globals>
		(block Nil
			(setq intAsteroidOnMining (lambda (miningDifficulty)
				(block (
					;	This table is used to number of HP required to extract a
					;	ton of ore of a given level.
					
					(oreVolumeTable (list
						1   1   2   2   3
						4   5   7   9   11
						15  19  25  33  42
						55  72  93  121 158
						205 266 346 450 586
						))
					
					theOre successChance countMined
					)
				
					;	NOTE:
					;
					;	EFFICIENCY is the probability that we succeed in mining ore.
					;	VOLUME is the amount of ore we mine if we succeed.
					;	YIELD is the percent of mined ore that we manage to extract
					;		(the rest is lost).
					;
					;	EFFICIENCY and YIELD are both determined by the mining level
					;	(from the damage descriptor). Consult the following table:
					;
					;	LEVEL	EFFICIENCY	YIELD
					;	1		4			97
					;	2		10			91
					;	3		20			84
					;	4		34			78
					;	5		52			76
					;	6		74			81
					;	7		100			100
					;
					;	VOLUME is computed from hit points of damage.
					
					(switch
					
						;	Pick a random ore item that exists here. If no ore, 
						;	then nothing to do.
						
						(not (setq theOre (random (objGetItems gSource "* +Ore;"))))
							Nil
							
						;	Compute the chance of success. If there is no chance, 
						;	nothing happens.
						
						(leq (setq successChance (divide (multiply aMineProbability miningDifficulty) 100)) 0)
							Nil
							
						;	Figure out how many tons we mine this time.
						
						(leq (setq countMined 
									(min 
										(divide aHP (@ oreVolumeTable (itmGetLevel theOre)))
										(itmGetCount theOre)
										)
									)
								0)
							Nil
						
						;	If we fail at extraction, then nothing
						
						(gr (random 1 100) successChance)
							Nil
								
						;	Otherwise, success
						
						(block (
							;	Compute the yield
							
							(yield (subtract 100 (divide (multiply aMineProbability (subtract 100 aMineProbability)) 100)))
							(yieldMod (modulo (multiply countMined yield) 100))
							(yieldCount 
								(add
									(divide (multiply countMined yield) 100)
									(if (leq (random 1 100) yieldMod) 1 0)
									)
								)
								
							(minedOre (itmCreate (itmGetType theOre) countMined))
							(extractedOre (itmCreate (itmGetType theOre) yieldCount))
							
							oreObj
							)
							
							(dbgOutput "Yield " yield)
							(dbgOutput "Mined " (itmGetName minedOre 0x08))
							(dbgOutput "Recovered " (itmGetName extractedOre 0x08))
							
							(setq oreObj (sysCreateStation &stMinedOre; aMinePos))
							(objRemoveItem gSource minedOre)
							(objAddItem oreObj extractedOre)
							(objIncVel oreObj (sysVectorPolarVelocity aMineDir 5))
							)
						)
					)
				))
			)
	</Globals>
	
<!-- DOCK SCREENS -->

	<!-- Mined Ore Dock Screen -->

	<DockScreen UNID="&dsMinedOre;"
			>

		<InitialPane>
			(if (objGetItems gSource "*")
				"Default"
				"Empty"
				)
		</InitialPane>

		<Panes>
			<Default
					desc=	"You are floating next to boulders of mined ore.">

				<Actions>
					<Action name="Bring Aboard" key="B" default="1" >
						(block Nil
							(if (objGetItems gPlayerShip "*I +MinersHold;")
								(scrShowScreen gScreen &dsRPGLoot; {
									nextScreen: &dsMinedOre;
									})
								(scrShowPane gScreen "NoMinersHold")
								)
							)
					</Action>

					<Action name="Leave" cancel="1" key="L">
						<Exit/>
					</Action>
				</Actions>

			</Default>

			<NoMinersHold>
				<OnPaneInit>
					(scrSetDesc gScreen "Without a miner's cargo hold you find it difficult to bring aboard all the ore. You will only be able to recover part of the ore. Continue?")
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1">
						(block (oreToRemove)
							; Remove 75% of the ore
							(setq oreToRemove Nil)
							(objEnumItems gSource "* +Ore;" theItem
								(block (count)
									(setq count (divide (multiply 75 (itmGetCount theItem)) 100))
									(if (gr count 0)
										(setq oreToRemove (append oreToRemove (list (itmSetCount theItem count))))
										)
									)
								)

							(enum oreToRemove theItem
								(objRemoveItem gSource theItem)
								)

							; Loot
							(scrShowScreen gScreen &dsRPGLoot; {
								nextScreen: &dsMinedOre;
								})
							)
					</Action>

					<Action name="Leave" key="L" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</NoMinersHold>

			<Empty
					desc=	"You are floating next to boulders of mined ore.">

				<Actions>
					<Action name="Leave" default="1" cancel="1" key="L">
						<Exit/>
					</Action>
				</Actions>
			</Empty>
		</Panes>
	</DockScreen>
	
<!-- RESOURCES -->

	<Image UNID="&rsOreSmall;" bitmap="Resources\OreSmall.jpg" bitmask="Resources\OreSmallMask.bmp" loadOnUse="true" />
	<Image UNID="&rsMinedOreBkgnd;" bitmap="Resources\MinedOreScreen.jpg" loadOnUse="true" />
	<Image UNID="&rsMinedOreHero;" bitmap="Resources\MinedOreHero.jpg" bitmask="Resources\MinedOreHeroMask.bmp" loadOnUse="true" />

</TranscendenceModule>