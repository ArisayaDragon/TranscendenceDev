<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Player ship's interior -->

	<DockScreen UNID="&dsShipInterior;">

		<Display type="detailsPane"
				>
			<OnDisplayInit>
				(block (
					(shipObj gPlayerShip)
					(shipClass (objGetType shipObj))
					)
					{
					largeIcon: (shpGetImageDesc shipClass { type:'schematic })
					details: 
						(or (objFireEvent shipObj 'GetShipDetails { })
							(rpgGetShipDetails shipObj { noDevices:True })
							)

					shipObj: shipObj
					}
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default descID="descWelcome">
				<Actions>
					<Action name="[S]hip Configuration">
						;	Show the appropriate dock services screen based on the ship
						;	class.
					
						(scrShowScreen gScreen
							(objGetProperty gPlayerShip 'shipConfigScreen)
							{ }
							)
					</Action>

					<Action name="[M]issions">
						(scrShowScreen gScreen &dsRPGMissionJournal;)
					</Action>

					<Action name="[V]iew Cargo Hold">
						(block Nil
							(setq gDest Nil)
							(scrShowScreen gScreen &dsCargoHold;)
							)
					</Action>

					<Action name="[R]efuel Reactor">
						(scrShowScreen gScreen &dsManualRefuel;)
					</Action>

					<Action name="[B]ack to Cockpit" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="core.name">Ship's Interior</Text>

			<Text id="descWelcome">
				
				You are inside the main compartment of your ship. A hatch in 
				front of you opens into the cargo hold. To the side there is a 
				small ladder that leads to the reactor and the ship's engines.

			</Text>
		</Language>
	</DockScreen>

	<!-- Player ship configuration -->

	<DockScreen UNID="&dsShipConfig;"
			desc=				"Ship Configuration"
			type=				"itemPicker"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*I"
			/>

		<Panes>
			<Default descID="descDefault">
				<OnPaneInit>
					(block (thisItem desc)
						(setq thisItem (scrGetItem gScreen))

						(if thisItem
							(block (theCategory)
								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem)) "\n\n"))

								; Describe the item installation
								(setq desc (cat desc (objGetInstalledItemDesc gPlayerShip thisItem) "."))
								
								; Display
								(scrSetDesc gScreen desc)
								)
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Done" cancel="1" key="D">
						<Navigate screen="&dsShipInterior;"/>
					</Action>

				</Actions>

			</Default>
		</Panes>

		<Language>
			<Text id="core.name">Ship's Configuration</Text>

			<Text id="descDefault">
				You are viewing the ship's configuration.
			</Text>
		</Language>
	</DockScreen>

	<!-- Player ship's cargo hold -->

	<DockScreen UNID="&dsCargoHold;"
			desc=				"Interior of Ship"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(switch

						;	If we want to select a specific item, then do it (this will
						;	cause a refresh of the pane).

						(scrGetData gScreen 'cursor)
							(block Nil
								(scrSetListCursor gScreen (scrGetData gScreen 'cursor))
								(scrSetData gScreen 'cursor Nil)
								)

						;	If we have no items, then nothing to do

						(not (scrGetItem gScreen))
							(block Nil
								(scrSetDescTranslate gScreen 'descCargoEmpty)
								(scrShowAction gScreen 'actionUse Nil)
								(scrEnableAction gScreen 'actionJettisonItem Nil)
								)

						;	Otherwise, initialize the pane

						(block (
							(thisItem (scrGetItem gScreen))
							(maxCount (itmGetCount thisItem))
							(unitPrice (itmGetPrice thisItem))
							(itemCurrency (itmGetProperty thisItem 'currency))

							;	Compose text that describes the item

							(itemText (if (= maxCount 1)

								(scrTranslate gScreen 'descCargoItem {
									unitMass: (strMassString (itmGetMass thisItem))
									unitPrice: (fmtCurrency  itemCurrency unitPrice)
									})

								(scrTranslate gScreen 'descCargoItems {
									unitMass: (strMassString (itmGetMass thisItem))
									unitPrice: (fmtCurrency itemCurrency unitPrice)
									count: maxCount
									totalMass: (strMassString (* (itmGetMass thisItem) maxCount))
									totalPrice: (fmtCurrency itemCurrency (* unitPrice maxCount))
									})
								))

							;	Compute trade compute text

							(tradeData (rpgItemTradeComputer thisItem))
							)

							;	Set the text

							(if tradeData
								(scrSetDesc gScreen itemText "\n\n" (@ tradeData 'sellRecommendation))
								(scrSetDesc gScreen itemText)
								)

							;	Remember some calculations for later

							(scrSetData gScreen 'maxCount maxCount)

							;	Enable/disable actions

							(scrShowAction gScreen 'actionUse 
								(and
									(objGetItemProperty gPlayerShip thisItem 'canBeUsed)
									(objGetItemProperty gPlayerShip thisItem 'hasUseScreen)
									)
								)
							(scrEnableAction gScreen 'actionJettisonItem (gr maxCount 0))
							)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							)
							(scrSetData gScreen 'cursor (scrGetListCursor gScreen))
							(scrShowItemUseScreen gScreen thisItem)
							)
					</Action>

					<Action id="actionJettisonItem">
						(block (
							(maxCount (scrGetData gScreen 'maxCount))
							)
							(switch
								(gr maxCount 1)
									(scrShowPane gScreen "JettisonQuantity")

								(block (itemsToJettison)
									;	Create cargo crate
									(if (not gDest)
										(setq gDest (sysCreateStation &stGenericCargoCrate; (sysVectorPolarOffset gPlayerShip 0 0)))
										)

									;	Dump items
									(setq itemsToJettison (scrRemoveItem gScreen 1))
									(rpgJettisonItem gDest itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action id="actionDone" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</Default>

			<JettisonQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block (
						(maxCount (scrGetData gScreen 'maxCount))
						)
						(scrSetDescTranslate gScreen 'descHowMany)
						(scrSetCounter gScreen maxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionJettison" default="1">
						(block (
							(useCount (scrGetCounter gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							)

							(switch
								(= useCount 0)
									(scrShowPane gScreen "Default")

								(gr useCount maxCount)
									(scrSetCounter gScreen maxCount)

								(block (itemsToJettison)
									;	Create cargo crate
									(if (not gDest)
										(setq gDest (sysCreateStation &stGenericCargoCrate; (sysVectorPolarOffset gPlayerShip 0 0)))
										)

									;	Dump items
									(setq itemsToJettison (scrRemoveItem gScreen useCount))
									(rpgJettisonItem gDest itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</JettisonQuantity>
		</Panes>

		<Language>
			<Text id="core.name">Ship's Cargo Hold</Text>

			<Text id="actionJettisonItem">[J]ettison this Item</Text>
			<Text id="actionJettison">[J]ettison</Text>
			<Text id="actionUse">[U]se this Item</Text>

			<Text id="descCargoEmpty">You are in your ship's cargo hold.</Text>
			<Text id="descCargoItem">
				Unit mass: %unitMass%\n
				Unit price: %unitPrice%
			</Text>
			<Text id="descCargoItems">
				Unit mass: %unitMass% (%count% at %totalMass%)\n
				Unit price: %unitPrice% (%count% for %totalPrice%)
			</Text>
			<Text id="descTradeData">
				Trade computer: %sellRecommendation% for %price%.
			</Text>
			<Text id="descTradeDataMultiple">
				Trade computer: %sellRecommendation% for %price% (%count% for %totalPrice%).
			</Text>
			<Text id="descHowMany">How many items do you wish to jettison?</Text>

			<Text id="tradeComputer.sellInSystem">
				Sell in the %systemName% System
			</Text>
			<Text id="tradeComputer.sellToObj">
				Sell to %objName% in this system
			</Text>
		</Language>
	</DockScreen>

	<!-- Refuel ship screen -->

	<DockScreen UNID="&dsManualRefuel;"
			type=				"itemPicker"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"f"
			/>

		<Panes>
			<Default descID="descDefault">
				<OnPaneInit>
					(block (thisItem curEngine)
						(setq thisItem (scrGetItem gScreen))
						(setq gMaxCount 0)
						(switch
							(not thisItem)
								(scrSetDesc gScreen "You do not have any items that can be used as fuel.")

							(not (shpIsFuelCompatible gPlayerShip thisItem))
								(scrSetDesc gScreen "You cannot use this kind of fuel in your ship's reactor.")

							(setq gMaxCount (itmGetCount thisItem))
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block Nil
							; No need to show help about refueling
							(plyEnableMessage gPlayer 'refuelHint Nil)

							; Handle refuel
							(switch
								; If this item requires confirmation, show pane
								(itmHasAttribute (scrGetItem gScreen) 'ConfirmRefuel)
									(scrShowPane gScreen "ConfirmRefuel")

								; If there are more than one item, get count
								(gr gMaxCount 1)
									(scrShowPane gScreen "RefuelQuantity")

								(eq gMaxCount 0)
									Nil

								; Refuel from a single item
								(block (itemsToUse)
									(setq itemsToUse (scrRemoveItem gScreen 1))

									(plyRedirectMessage gPlayer True)
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(plyRedirectMessage gPlayer Nil)

									(if (plyGetRedirectMessage gPlayer)
										(scrShowPane gScreen "RefuelMessage")
										(scrExitScreen gScreen)
										)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<Exit/>
					</Action>

				</Actions>

			</Default>

			<ConfirmRefuel>
				<OnPaneInit>
					(scrSetDesc gScreen 
						(cat "Are you sure you want to use " 
							(itmGetName (scrGetItem gScreen) 0x04)
							" for fuel?"
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Yes" key="Y">
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "RefuelQuantity")

							(eq gMaxCount 0)
								(scrShowPane gScreen "Default")

							(block (itemsToUse)
								(setq itemsToUse (scrRemoveItem gScreen 1))

								(plyRedirectMessage gPlayer True)
								(shpRefuelFromItem gPlayerShip itemsToUse)
								(plyRedirectMessage gPlayer Nil)

								(if (plyGetRedirectMessage gPlayer)
									(scrShowPane gScreen "RefuelMessage")
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action name="No" key="N" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</ConfirmRefuel>

			<RefuelMessage>
				<OnPaneInit>
					(scrSetDesc gScreen (plyGetRedirectMessage gPlayer))
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						<Exit/>
					</Action>
				</Actions>
			</RefuelMessage>

			<RefuelQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block (thisItem maxNeeded)
						(setq thisItem (scrGetItem gScreen))
						(setq maxNeeded (shpGetFuelNeeded gPlayerShip thisItem))
						(if (ls maxNeeded gMaxCount)
							(setq gMaxCount maxNeeded)
							)
						(scrSetDesc gScreen (cat "How many " (itmGetName thisItem 2) " do you wish to use?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToUse)
									(setq itemsToUse (scrRemoveItem gScreen count))

									(plyRedirectMessage gPlayer True)
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(plyRedirectMessage gPlayer Nil)

									(if (plyGetRedirectMessage gPlayer)
										(scrShowPane gScreen "RefuelMessage")
										(scrExitScreen gScreen)
										)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<Exit/>
					</Action>

				</Actions>

			</RefuelQuantity>

			<RefuelMessage>
				<OnPaneInit>
					(scrSetDesc gScreen (plyGetRedirectMessage gPlayer))
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						<Exit/>
					</Action>
				</Actions>
			</RefuelMessage>

		</Panes>

		<Language>
			<Text id="core.name">Ship's Cargo Hold</Text>

			<Text id="descDefault">
				Pick an item to use as fuel.
			</Text>
		</Language>
	</DockScreen>
	
<!-- MISSION JOURNAL ===========================================================

	This screen is designed to be opened from the Ship's interior screen. It
	show the list of active missions for the player.

-->

	<DockScreen UNID="&dsRPGMissionJournal;"
			type=				"customPicker"
			nestedScreen=		"true"
			>

		<List
			rowHeight="32"
			>
			(block (missionList)

				; Make a list of active player missions entries. Each entry is a list
				; with the following elements:
				;
				; 0.	The name of the mission
				; 1.	Nil (this would normally be the icon)
				; 2.	Nil (this would normally be a short description)
				; 3.	The mission object
				; 4.	The time the mission was accepted

				(setq missionList (map (msnFind "a") theMission
					(list (msnGetProperty theMission 'name) Nil Nil theMission (msnGetProperty theMission 'acceptedOn))
					))

				; Now sort by accepted time (later first)

				(sort missionList 'descending 4)
				)
		</List>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (theEntry theMission)
						(setq theEntry (scrGetListEntry gScreen))
						(setq theMission (@ theEntry 3))

						(switch
							(not theEntry)
								(scrSetDesc gScreen "You have no missions to complete.")

							(scrSetDesc gScreen (msnGetProperty theMission 'summary))
							)
							
						(scrShowAction gScreen 0 (msnGetProperty theMission 'canBeDeleted))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Remove Mission" key="R">
						(block (theEntry theMission)
							(setq theEntry (scrGetListEntry gScreen))
							(setq theMission (@ theEntry 3))
							
							(msnFailure theMission)
							(scrRefreshScreen gScreen)
							)
					</Action>
					
					<Action name="Done" key="D" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- RESOURCES -->

	<Image UNID="&rsItemListScreen;"	bitmap="Resources\ItemListScreen.jpg"		bitmask="Resources\ItemListScreenMask.bmp"		loadOnUse="true" />
	
</TranscendenceModule>
