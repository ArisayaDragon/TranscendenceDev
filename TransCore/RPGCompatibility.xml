<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- COMPATIBILITY TYPES =======================================================

	This module contains types that have been DEPRECATED and superceded by 
	newer types.

							SYSTEM
	OLD TYPE				VERSION		NEW TYPE

	dsJettison				78			dsRPGJettison
	dsLoot					78			dsRPGLoot
	dsRepairItem			78			dsRPGRepairItem

	-->

	<DockScreen UNID="&dsRepairItem;"
			type=				"itemPicker"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(scrSetListFilter gScreen gShowCriteria)
		</ListOptions>

		<Panes>
			<Default
					desc=	"You do not have any items that we can repair.">

				<OnPaneInit>
					(block (thisItem currencyUsed)
						(setq thisItem (scrGetItem gScreen))
						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gResult Nil)

						(if thisItem
							(block (desc)
								; Compute the cost to repair the item
								(setq gCost (divide (multiply (itmGetPrice thisItem currencyUsed) gMargin) 100))

								(switch
									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(setq desc (cat "It will cost " (fmtCurrency currencyUsed gCost) " to repair " (itmGetName thisItem 0x04) ". Unfortunately, you cannot afford the cost."))

									(block Nil
										(setq desc (cat "We can repair " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) "."))
										(setq gResult True)
										)
									)

								(scrSetDesc gScreen desc)
								)
							)

						(scrEnableAction gScreen 0 gResult)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair Item" default="1" key="R">
						(block Nil
							(setq gItem (scrGetItem gScreen))
							
							(shpEnhanceItem gPlayerShip gItem)
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							
							(scrShowPane gScreen "Success")
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>

			</Default>

			<Success
					noListNavigation="true"
					>
				<OnPaneInit>
					(scrSetDesc gScreen (cat "Your " (itmGetName gItem 0) " has been repaired successfully."))
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</Success>
		</Panes>

	</DockScreen>

	<!-- Jettison

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.

	-->

	<DockScreen UNID="&dsJettison;"
			name=				"Ship's Cargo Hold"
			type=				"itemPicker"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=	"There are no items in your cargo hold that can be jettisoned.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))

						(if thisItem
							(block (availCount fitCount)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gSource thisItem))
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(if (ls (objGetCargoSpaceLeft gSource) 200000)
									(setq desc (cat desc "\nCapacity: " (strMassString (objGetCargoSpaceLeft gSource))))
									)

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "\n\nThere is not enough space here to jettison " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "\n\nThere is enough space to jettison one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "\n\nThere is enough space to jettison only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "\n\nThere is enough space to jettison all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison this Item" default="1" key="J" >
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "JettisonQuantity")

							(eq gMaxCount 1)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen 1))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
							)
				</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen)
				</Action>

			</Actions>

		</Default>

			<JettisonQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to jettison?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison" default="1" key="J">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen count))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</JettisonQuantity>
		</Panes>
	</DockScreen>

	<!-- Loot 

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.

	-->

	<DockScreen UNID="&dsLoot;"
			type=				"itemPicker"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=		"There are no items here.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (fitCount availCount desc)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gPlayerShip thisItem))
								
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You do not have enough space to carry " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "You have enough room to carry one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "You have enough room to carry only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "You have enough room to carry all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot this Item" key="L" default="1" >
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "LootQuantity")
							(if (eq gMaxCount 1)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToLoot)
									(typSetData &svPlayer; 'tutorialLooted True)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen)
					</Action>

				</Actions>

			</Default>

			<LootQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to loot?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot" default="1" key="L">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToLoot)
									(typSetData &svPlayer; 'tutorialLooted True)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</LootQuantity>
		</Panes>

	</DockScreen>

<!-- DOCK SERVICES =============================================================

	This screen allows the player to repair and upgrade their ship at a station.
	We rely on the <Trade> entries to determine the services that the station 
	will offer.
	
	gData uses the following fields:
	
		checkMilitaryID: If True, we check for military ID before installing
				any military items. We also refuse to install Illegal items.
		
		reactorUpgrade: If non-Nil, this must be a list generate with
				rpgGetReactorUpgradeList. Otherwise, we do not offer a reactor
				upgrade at this station.

-->
	
	<DockScreen unid="&dsRPGDockServicesCompatible;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(canRepairArmor (objGetProperty gSource 'repairArmorMaxLevel))
						(canInstallDevices (objGetProperty gSource 'installDeviceMaxLevel))
						)
					
						;	Show/hide actions based on the services available
						;	at this station.

						(scrShowAction gScreen 'actionRepairArmor canRepairArmor)
						(scrShowAction gScreen 'actionInstallDevice canInstallDevices)
						(scrShowAction gScreen 'actionRemoveDevice canInstallDevices)
						(scrShowAction gScreen 'actionUpgradeReactor (@ gData 'reactorUpgrade))
						
						;	Descriptor
						
						(scrSetDescTranslate gScreen 'dockServicesScreenDesc)
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionRefuel">
						(scrShowScreen gScreen "&dsRPGRefuel;")
					</Action>

					<Action id="actionRepairArmor">
						(scrShowScreen gScreen "&dsRPGRepairArmor;" {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>

					<Action id="actionInstallDevice">
						(scrShowScreen gScreen &dsRPGInstallDevice; {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>

					<Action id="actionRemoveDevice">
						(block Nil
							(setq gMargin 100)
							(scrShowScreen gScreen &dsRemoveDevice;)
							)
					</Action>

					<Action id="actionUpgradeReactor">
						(scrShowScreen gScreen &dsRPGInstallDeviceFromList; {
							itemList: (@ gData 'reactorUpgrade)
							priceAdj: Nil
							checkMilitaryID: (@ gData 'checkMilitaryID)
							noItemsText: (scrTranslate gScreen 'errorNoReactorTech)
							})
					</Action>

					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionDone">"Do[n]e"</Text>
			<Text id="actionInstallDevice">"Install [D]evice"</Text>
			<Text id="actionRefuel">"[R]efuel"</Text>
			<Text id="actionRemoveDevice">"Remo[v]e Device"</Text>
			<Text id="actionRepairArmor">"Repair or Replace [A]rmor"</Text>
			<Text id="actionUpgradeReactor">"U[p]grade Reactor"</Text>
			
			<Text id="dockServicesScreenDesc">"Your ship is docked."</Text>
			
			<Text id="errorNoReactorTech">"The technology required to upgrade your reactor is not available at this station."</Text>
		</Language>
	</DockScreen>

<!-- REPAIR ARMOR SCREEN =======================================================

	This screen allows the player to repair armor at a station. It requires the
	station to use the <RepairArmor> directive in its <Trade> section.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

-->

	<DockScreen UNID="&dsRPGRepairArmor;"
			type=				"itemPicker"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(block (
				(desiredSeg (scrGetData gScreen 'armorSeg))
				(seg (itmGetArmorInstalledLocation (scrGetItem gScreen)))
				)

				(or (not desiredSeg) (eq seg desiredSeg))
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (currencyUsed damage desc theArmor canRepair)
						(setq theArmor (scrGetItem gScreen))
						(setq damage (objGetArmorDamage gPlayerShip theArmor))
						(setq maxHP (shpGetArmorMaxHitPoints gPlayerShip theArmor))

						; Remember the armor segment so that we can come back to 
						; this same selection (e.g., when we go to replace armor)

						(scrSetData gScreen 'armorSeg (itmGetArmorInstalledLocation theArmor))

						; Ask the station to compute the cost of repairing the given hit points

						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gCost (objGetArmorRepairPrice gSource theArmor damage))

						; Compose repair message for this segment

						(setq desc (cat "The ship's " (objGetArmorName gPlayerShip theArmor) " " (itmGetName theArmor 0)))
						(setq canRepair True)

						(switch
							(eq damage 0)
								(block Nil
									(setq desc (cat desc " is not damaged."))
									(setq canRepair Nil)
									)

							(and (not gCost)
									(gr (itmGetLevel theArmor) (objGetProperty gSource 'repairArmorMaxLevel)))
								(block Nil
									(setq desc (cat desc " cannot be repaired. The technology required is not available at this station."))
									(setq canRepair Nil)
									)

							(not gCost)
								(block Nil
									(setq desc (cat desc " cannot be repaired at this station."))
									(setq canRepair Nil)
									)

							(ls (subtract maxHP damage) (divide maxHP 4))
								(block Nil
									(setq desc (cat desc " is heavily damaged and cannot be repaired."))
									(setq canRepair Nil)
									)

							(ls (objGetBalance gPlayerShip currencyUsed) gCost)
								(block Nil
									(setq desc (cat desc " can be repaired for " (fmtCurrency currencyUsed gCost) ", which, unfortunately, is more than you can afford."))
									(setq canRepair Nil)
									)

							(eq gCost 0)
								(setq desc (cat desc " is damaged and can be repaired free of charge."))

							(setq desc (cat desc " is damaged and will cost " (fmtCurrency currencyUsed gCost) " to repair."))
							)

						; Initialize the pane

						(scrSetDesc gScreen desc)
						(scrEnableAction gScreen 0 canRepair)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair" key="R" >
						(block Nil
							(objRepairArmor gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							(typSetData &svPlayer; 'tutorialRepaired True)
							(scrShowPane gScreen "Default")
							)
					</Action>

					<Action name="Replace" key="P" >
						(scrShowScreen gScreen &dsRPGReplaceArmor; {
							armorSeg: (scrGetData gScreen 'armorSeg)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- REPLACE ARMOR SCREEN ======================================================

	This screen allows the player to refuel from a station. It requires the
	station to use the <Refuel> directive in its <Trade> section.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGReplaceArmor;"
			type=				"itemPicker"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			/>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<OnPaneInit>
					(block (thisItem canInstall currencyUsed armorSeg)
						(setq armorSeg (@ gData 'armorSeg))
						(setq thisItem (scrGetItem gScreen))
						(setq canInstall True)
						(setq currencyUsed (objGetDefaultCurrency gSource))
						
						(if thisItem
							(block (desc cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem armorSeg))
								(setq gCost (objGetArmorReplacePrice gSource thisItem))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip armorSeg)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " are too heavy for your ship's hull."))
											(setq canInstall Nil)
											)

									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Military")
											(not (objGetItems gPlayerShip "*+MilitaryID"))
											)
										(block Nil
											(setq desc (cat "You must have a military ID to install " (itmGetName thisItem 0x80) "."))
											(setq canInstall Nil)
											)
											
									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Illegal")
											)
										(block Nil
											(setq desc "We do not install illegal armor segments.")
											(setq canInstall Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(setq desc gResult)
											(setq canInstall Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)

									(not gCost)
										(block Nil
											(setq desc "This armor segment cannot be installed at this station.")
											(setq canInstall Nil)
											)

									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)

									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(block Nil
											(setq desc (cat "This armor segment can be installed for " (fmtCurrency currencyUsed gCost) ". Unfortunately, you cannot afford this cost."))
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc "This armor segment can be installed free of charge.")

									(setq desc (cat "This armor segment can be installed for " (fmtCurrency currencyUsed gCost) "."))
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen "You do not have any armor segments in your cargo hold.")
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Install this Armor" default="1" key="I" >
						(block (thisItem currencyUsed)
							(setq thisItem (scrGetItem gScreen))
							(setq currencyUsed (objGetDefaultCurrency gSource))

							(if (and thisItem (geq (objGetBalance gPlayerShip currencyUsed) gCost))
								(block Nil
									(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
									(objCharge gPlayerShip currencyUsed gCost)
									
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

</TranscendenceModule>
