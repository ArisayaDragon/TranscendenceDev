<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	<Globals>
		(block Nil

			(setq rpgAdjustInstallPrice (lambda (theObj theItem thePriceAdj theCurrency)
				(switch
					(isInt thePriceAdj)
						(divide
							(multiply thePriceAdj (itmGetInstallCost theItem theCurrency))
							100
							)

					(isFunction thePriceAdj)
						(apply thePriceAdj theItem Nil)

					(itmGetInstallCost theItem theCurrency)
					)
				))

			(setq rpgAdjustPrice (lambda (theObj theItem thePriceAdj theCurrency noInventoryCheck)
				(switch
					(isInt thePriceAdj)
						(divide
							(multiply thePriceAdj (itmGetPrice theItem theCurrency))
							100
							)

					(isFunction thePriceAdj)
						(apply thePriceAdj theItem Nil)

					(objGetSellPrice theObj theItem noInventoryCheck)
					)
				))

			(setq rpgBuyItem (lambda (theObj theItem thePrice theCurrency)
				(block Nil
					; Add to player ship
					(objAddItem gPlayerShip theItem)
					
					; Charge the player
					(objCharge gPlayerShip theCurrency thePrice)
					(plyRecordBuyItem gPlayer theItem theCurrency thePrice)

					; Add to station balance
					(objCredit gSource theCurrency thePrice)

					; If the player bought items at a black market station then
					; increase xp
					(if (and
							(objHasAttribute theObj "blackmarket")
							(itmHasModifier theItem "Illegal")
							)
						(objIncData gPlayerShip "blackMarketXP" (divide thePrice 100))
						)
					)
				))

			(setq rpgGetReactorUpgradeList (lambda (theObj theShip theCriteria)
				(block (minPower reactorList additionalList)

					; Compute the current reactor power of the player ship
					; NOTE: We have to multiply by 100 to get to kilowatts
					(setq minPower (multiply (objGetMaxPower theShip) 100))

					; Make a list of reactor items, filtering out any that are
					; too small for the ship.
					(setq reactorList (map (itmGetTypes theCriteria) 'excludeNil theUNID
						(switch

							; If this reactor has less power than the player's
							; current reactor, then skip it.
							(leq (typGetDataField theUNID 'power) minPower)
								Nil

							; Not if the object wouldn't normally sell it
							(not (objGetSellPrice theObj (itmCreate theUNID 1) 'noInventoryCheck))
								Nil

							; Otherwise, add the reactor to the list
							(itmCreate theUNID 1)
							)
						))

					; Append any reactors that the object happens to have. But 
					; make sure that we don't duplicate.
					(setq additionalList (map (objGetItems theObj "rNU") 'excludeNil theItem
						(switch
							; Not if we already have it in our list
							(find reactorList (itmSetCount theItem 1))
								Nil

							; If this reactor has less power than the player's
							; current reactor, then skip it.
							(leq (typGetDataField (itmGetType theItem) 'power) minPower)
								Nil

							; Not if the object wouldn't normally sell it
							(not (objGetSellPrice theObj theItem 'noInventoryCheck))
								Nil

							; Add it
							theItem
							)
						))

					; Return the list
					(append reactorList additionalList)
					)
				))

			(setq rpgInstallDevicePrep (lambda (data)

				; Data must have the following fields
				;
				;	item:					The item to install
				;
				; In addition, the following optional fields are supported
				;
				;	totalPrice:				The total price to install (may include purchase price)
				;	installPriceAdj:		Installation price (only if totalPrice is Nil)
				;	currencyUsed:			The currency used
				;	maxTechLevel:			The maximum tech level we will install
				;	techCriteria:			If not Nil, the item must match this criteria
				;	checkMilitaryID:		If True, we check for military ID, if necessary
				;	itemInCargo:			If True, item is in player's cargo hold
				;	buyAndInstall:			If True, we're installing as part of purchase
				;
				; We return a struct with the following elements:
				;
				;	canInstall:				True if installation can proceed
				;	price:					Total installation cost
				;	desc:					Description of installation attempt

				(block (thisItem totalCost canInstall desc theResult itemName currencyUsed)
				
					(setq thisItem (@ data 'item))
					(setq currencyUsed (@ data 'currencyUsed))
					(if (not currencyUsed) (setq currencyUsed (objGetDefaultCurrency gPlayerShip)))
					(setq itemName (itmGetName thisItem (if (@ data 'buyAndInstall) 0x40 0x04)))
					(setq canInstall Nil)

					(if thisItem
						(block (cargoNeeded replaceCriteria)
						
							; Compute the cost to install
							
							(switch
								(@ data 'totalPrice)
									(setq totalCost (@ data 'totalPrice))
								
								(setq totalCost (rpgAdjustInstallPrice Nil thisItem (@ data 'installPriceAdj) currencyUsed))
								)

							(setq theResult (shpCanInstallDevice gPlayerShip thisItem))
							(setq replaceCriteria Nil)

							(switch
								; If we don't have the technology, we cannot install
								; (except for specific items that we know about)
								(and (gr (itmGetLevel thisItem) (if (@ data 'maxTechLevel) (@ data 'maxTechLevel) 30))
										(or (not (@ data 'techCriteria))
											(not (itmMatches thisItem (@ data 'techCriteria))))
										)
									(setq desc (cat "We do not have the technology to install " itemName " on your ship."))

								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Military")
										(not (objGetItems gPlayerShip "*+MilitaryID"))
										)
									(setq desc (cat "You must have a military ID to use " itemName "."))
									
								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc "We do not install illegal items.")

								(eq theResult 2)
									(setq desc "Your ship cannot support any more devices.")

								(eq theResult 4)
									(block Nil
										(setq desc (cat "We can remove your shield generator and install " itemName))
										(setq replaceCriteria "sI")
										(setq canInstall True)
										)

								(eq theResult 5)
									(block Nil
										(setq desc (cat "We can remove your propulsion system and install " itemName))
										(setq replaceCriteria "vI")
										(setq canInstall True)
										)

								(eq theResult 6)
									(block Nil
										(setq desc (cat "We can remove your missile launcher and install " itemName))
										(setq replaceCriteria "lI")
										(setq canInstall True)
										)

								(eq theResult 7)
									(setq desc "Your ship's reactor is not powerful enough for this device.")

								(eq theResult 8)
									(setq desc "You already have a cargo expansion system installed.")

								(eq theResult 9)
									(block Nil
										(setq desc (cat "We can remove your reactor upgrade and install " itemName))
										(setq replaceCriteria "rI")
										(setq canInstall True)
										)

								(eq theResult 10)
									(setq desc "The cargo expansion system is too large to be installed in your ship.")

								(eq theResult 11)
									(setq desc (cat "The power output of " itemName " is too high for your ship."))

								(eq theResult 12)
									(setq desc "Your ship cannot support any more weapons.")

								(eq theResult 13)
									(setq desc "Your ship cannot support any more non-weapon devices.")

								(not (isint theResult))
									(setq desc theResult)

								(not (eq theResult 0))
									(setq desc "This device cannot be installed.")

								(block Nil
									(setq desc (cat "We can install " itemName " on your ship"))
									(setq canInstall True)
									)
								)

							; If we need to remove a device, then it will cost more

							(setq cargoNeeded 0)
							(if (and canInstall replaceCriteria)
								(objEnumItems gPlayerShip replaceCriteria itemToRemove
									(block Nil
										(if (not (@ data 'totalPrice))
											(setq totalCost 
												(add totalCost 
													; Remove cost is 1/2 of install cost
													(divide (multiply gMargin (itmGetInstallCost itemToRemove currencyUsed)) 200)
													)
												)
											)

										; See how much cargo space we need to store the old item

										(setq cargoNeeded (itmGetMass itemToRemove))
										(if (@ data 'isItemInCargo)
											(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
											)
										)
									)
								)

							; See if the item fits

							(if canInstall
								(if (gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
									(block Nil
										(setq desc (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
										(setq canInstall Nil)
										)
									)
								)

							; See if we can afford the installation

							(if canInstall
								(if (gr totalCost 0)
									(if (gr totalCost (objGetBalance gPlayerShip currencyUsed))
										(block Nil
											(setq desc (cat desc " for " (fmtCurrency currencyUsed totalCost) ". Unfortunately, you cannot afford the cost."))
											(setq canInstall Nil)
											)
										(setq desc (cat desc " for " (if (@ data 'buyAndInstall) "an additional " "") (fmtCurrency currencyUsed totalCost) "."))
										)
									(setq desc (cat desc " at no charge."))
									)
								)
							)
						(setq desc "You do not have any devices that can be installed.")
						)

					; Return variables
					{
						canInstall: canInstall
						price: totalCost
						desc: desc
						}
					)
				))

			(setq rpgRestorePlayer (lambda ()

			; Repairs and restores the player's ship and places it at a random, safe
			; position in the system.

				(block (portObj newPos)

					; Find the nearest friendly station in the system
					(setq portObj (sysFindObject gPlayerShip "TAFN +populated; -occupation;"))
					(if (not portObj)
						(enumwhile (sysFindObject gPlayerShip "tF") (not portObj) theObj
							(if (not (sysFindObject theObj "sTEN:75"))
								(setq portObj theObj)
								)
							)
						)
					(if (not portObj)
						(setq portObj (sysFindObject gPlayerShip "tFN"))
						)

					; Pick a random position
					(setq newPos (sysVectorRandom portObj (random 30 40) 10 "t"))

					; Place the ship there
					(objMoveTo gPlayerShip newPos)

					; Repair the ship
					(intArmorRepairAll gPlayerShip 25 'alwaysRepair)
					(intDeviceRepairAll gPlayerShip)
					(shpRechargeShield gPlayerShip 1000)
					(shpRefuelFromItem gPlayerShip (itmCreate &itHelium3FuelRod; (shpGetFuelNeeded gPlayerShip (itmCreate &itHelium3FuelRod; 1))))
					(objChangeEquipmentStatus gPlayerShip 'SRS 'repair)
					(objFixParalysis gPlayerShip)
					(shpDecontaminate gPlayerShip)
					
					; Remove any overlays that shouldn't be there (e.g., pteravores)
					(enum (objGetOverlays gPlayerShip) theOverlay
						(objFireOverlayEvent gPlayerShip theOverlay "OnInsuranceClaim")
						)
					)
				))
			)
	</Globals>

</TranscendenceModule>