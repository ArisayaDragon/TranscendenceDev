<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- MISSION SCREEN ============================================================

	gData uses the following fields:

	missionObj:			The mission that we are showing.

	nextScreen:			If specified, we navigate to the given screen when we're
						done. This may also be a list consisting of a screen and
						a pane.

	MISSION OBJECT

	If the mission object has a data value named "rewardNextScreen" then it is used
	as a nextScreen parameter during debrief. This is used to implement things
	like promotions.

-->

	<DockScreen UNID="&dsRPGMission;"
			nestedScreen=		"true"
			>
		<OnScreenInit>
			(block Nil
				; Store the mission object in screen data
				(scrSetData gScreen 'missionObj (@ gData 'missionObj))
				)
		</OnScreenInit>

		<InitialPane>
			(block (
				(missionObj (scrGetData gScreen 'missionObj))
				)

				(switch
					; If mission is available and player has not previously been
					; briefed, then start with intro...

					(msnGetProperty missionObj 'isOpen)
						(if (msnGetProperty missionObj 'isIntroShown)
							"Briefing"
							"Intro"
							)

					; If this is an active mission, then handle it

					(msnGetProperty missionObj 'isActive)
						(switch
							(msnGetProperty missionObj 'isSuccess)
								"Success"

							(msnGetProperty missionObj 'isFailure)
								"Failure"

							"InProgress"
							)

					; If we've already been debriefed

					(msnGetProperty missionObj 'isDebriefed)
						"AlreadyDebriefed"

					; Otherwise, this is not a player mission

					"Unavailable"
					)
				)
		</InitialPane>

		<Panes>
			<Intro>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(missionText (msnTranslate missionObj 'Intro))
						(pageCount (if (isatom missionText) 1 (count missionText)))
						(pageNo (scrGetData gScreen 'curPage))
						)

						; Start at the beginning if we have no page number
						(if (not pageNo)
							(setq pageNo 0)
							)

						; Show the appropriate page
						(scrSetDesc gScreen (@ missionText pageNo))

						; Next page
						(setq pageNo (add pageNo 1))
						(if (eq pageNo pageCount)
							(scrSetData gSCreen 'curPage nil)
							(scrSetData gScreen 'curPage pageNo)
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							)

							(if (scrGetData gScreen 'curPage)

								; If more pages, then continue
								(scrShowPane gScreen "Intro")

								; Otherwise, intro is done
								(block nil
									(msnSetProperty missionObj 'isIntroShown True)
									(scrRefreshScreen gScreen)
									)
								)
							)
					</Action>
				</Actions>
			</Intro>

			<Briefing>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(missionText (msnTranslate missionObj 'Briefing))
						(pageCount (if (isatom missionText) 1 (count missionText)))
						(pageNo (scrGetData gScreen 'curPage))

						(atLastPage Nil)
						)

						; Start at the beginning if we have no page number
						(if (not pageNo)
							(setq pageNo 0)
							)

						; Show the appropriate page
						(scrSetDesc gScreen (@ missionText pageNo))

						; Next page
						(setq pageNo (add pageNo 1))
						(setq atLastPage (eq pageNo pageCount))

						; Initialize actions
						(scrShowAction gScreen 'continue (not atLastPage))
						(scrShowAction gScreen 'accept atLastPage)
						(scrShowAction gScreen 'decline atLastPage)

						; Remeber page
						(scrSetData gSCreen 'curPage (if atLastPage Nil pageNo))
						)
				</OnPaneInit>

				<Actions>
					<Action id="continue" name="Continue" key="C" default="1" cancel="1">
						(scrShowPane gScreen "Briefing")
					</Action>

					<Action id="accept" name="Accept" key="A" default="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							)

							(msnAccept missionObj)
							(scrShowPane gScreen "ReplyAccept")
							)
					</Action>

					<Action id="decline" name="Decline" key="D" cancel="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							)

							(msnDecline missionObj)
							(scrShowPane gScreen "ReplyDecline")
							)
					</Action>
				</Actions>
			</Briefing>

			<ReplyAccept>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'AcceptReply))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action id="continue" name="Continue" key="C" default="1" cancel="1">
						(scrExitScreen gScreen 'forceUndock)
					</Action>
				</Actions>
			</ReplyAccept>

			<ReplyDecline>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(declineText (msnTranslate missionObj 'DeclineReply))
						)

						(scrSetDesc gScreen declineText)
						)
				</OnPaneInit>

				<Actions>
					<Action id="continue" name="Continue" key="C" default="1" cancel="1">
						(block Nil
							(scrExitScreen gScreen)

							(if (@ gData 'nextScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</ReplyDecline>

			<InProgress>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'InProgress))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							)

							(msnSetPlayerTarget missionObj)
							(scrExitScreen gScreen 'forceUndock)
							)
					</Action>
				</Actions>
			</InProgress>

			<Success>
				<OnPaneInit>
					(block (missionObj descText pageCount pageNo atLastPage rewardResult)

						(setq missionObj (scrGetData gScreen 'missionObj))

						; If we haven't already, give the player the reward. We need
						; to call msnReward before getting the debriefing text because
						; we might have gotten a promotion (or something).

						(if (not (msnGetProperty missionObj 'isDebriefed))
							(block Nil
								(msnReward missionObj)
								(msnSetProperty missionObj 'isDebriefed True)
								)
							)

						; Get the debriefing text and page counts

						(setq descText (msnTranslate missionObj 'SuccessDebrief))
						(setq pageCount (if (isatom descText) 1 (count descText)))
						(setq pageNo (scrGetData gScreen 'curPage))

						; Start at the beginning if we have no page number

						(if (not pageNo)
							(setq pageNo 0)
							)

						; Show the appropriate page

						(scrSetDesc gScreen (@ descText pageNo))

						; Next page

						(setq pageNo (add pageNo 1))
						(setq atLastPage (geq pageNo pageCount))

						; Initialize actions

						(scrShowAction gScreen 'continue (not atLastPage))
						(scrShowAction gScreen 'done atLastPage)

						; Remember page

						(scrSetData gScreen 'curPage (if atLastPage Nil pageNo))
						)
				</OnPaneInit>

				<Actions>
					<Action id="continue" name="Continue" key="C" default="1" cancel="1">
						(scrShowPane gScreen "Success")
					</Action>

					<Action id="done" name="Continue" key="C" default="1" cancel="1">
						(block (missionObj)
							(setq missionObj (scrGetData gScreen 'missionObj))
							(scrExitScreen gScreen)

							(switch
								(@ gData 'nextScreen)
									(scrShowScreen gScreen (@ gData 'nextScreen))

								(msnGetData missionObj 'rewardNextScreen)
									(scrShowScreen gScreen (msnGetData missionObj 'rewardNextScreen))

								Nil
								)
							)
					</Action>
				</Actions>
			</Success>

			<Failure>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'FailureDebrief))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							)

							(msnSetProperty missionObj 'isDebriefed True)
							(scrExitScreen gScreen)

							(if (@ gData 'nextScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</Failure>

			<AlreadyDebriefed>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'AlreadyDebriefed "\"Welcome back! Thanks for the great work last time.\""))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(block Nil
							(scrExitScreen gScreen)

							(if (@ gData 'nextScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</AlreadyDebriefed>

			<Unavailable>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'Unavailable "\"Sorry, there are no missions available.\""))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(block Nil
							(scrExitScreen gScreen)

							(if (@ gData 'nextScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</Unavailable>
		</Panes>

		<Events>
			<GetGlobalDockScreen>
				(block (missionObj)
					(switch
						; Find any mission that is completed and not yet debriefed

						(setq missionObj (@ (filter (msnFind gSource "aS") theMission (msnGetProperty theMission 'isCompleted)) 0))
							(list &dsRPGMission; { missionObj: missionObj } 4)

						; Otherwise, nothing

						Nil
						)
					)
			</GetGlobalDockScreen>
		</Events>
	</DockScreen>

<!-- DELIVERY MISSION SCREEN ===================================================

	gData uses the following fields:

	missionObj:			The mission that we are showing.

	MISSION OBJECT

	In order to take advantage of this screen, the mission object should have
	the following characteristics:

	1.	The mission type must have the "deliveryMission" attribute.

	2.	The mission object must have data of "destID" with the ID of the
		recipient of the delivery.

	3.	The mission type should handle an event called "OnDeliveryMissionCompleted"
		which handles the delivery (e.g., removing the appropriate object
		from the player's cargo. The event must call either msnSuccess or
		msnFailure. It must return a string to display to the user describing
		the result.

-->

	<DockScreen UNID="&dsRPGDeliveryMission;"
			nestedScreen=		"true"
			>
		<OnScreenInit>
			(block Nil
				; Store the mission object in screen data
				(scrSetData gScreen 'missionObj (@ gData 'missionObj))
				)
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (missionObj desc)
						(setq missionObj (scrGetData gScreen 'missionObj))
						(setq desc (msnFireEvent missionObj 'OnDeliveryMissionCompleted))
						(scrSetDesc gScreen desc)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Events>
			<GetGlobalDockScreen>
				; Find a delivery mission that is not completed and whose recipient
				; is this station.

				(block (missionObj)
					(switch
						(setq missionObj (@ 
								(filter (msnFind gSource "a +deliveryMission;") theMission 
									(and
										(not (msnGetProperty theMission 'isCompleted))
										(eq gSource (objGetObjByID (msnGetData theMission 'destID)))
										)
									)
								0))
							(list &dsRPGDeliveryMission; { missionObj: missionObj } 4)

						; Otherwise, nothing

						Nil
						)
					)
			</GetGlobalDockScreen>
		</Events>
	</DockScreen>

<!-- GLOBAL FUNCTIONS ==========================================================

-->

	<Globals>
		(block Nil
			(setq rpgSetTarget (lambda (missionObj reasonCode targetObj command)
				(block (newTargetObj)
					(switch
						; If we just got debriefed then we clear our targets.

						(eq reasonCode 'debriefed)
							(shpCancelOrders gPlayerShip)

						; If the mission is complete, then we point towards the 
						; owner station.

						(msnGetProperty missionObj 'isCompleted)
							(if (setq newTargetObj (objGetObjByID (msnGetProperty missionObj 'ownerID)))
								(block Nil
									(shpCancelOrders gPlayerShip)
									(shpOrder gPlayerShip 'dock newTargetObj)
									)
								)

						; Otherwise, we point towards the target

						(if targetObj
							(block Nil
								(shpCancelOrders gPlayerShip)
								(shpOrder gPlayerShip (if command command 'attack) targetObj)
								)
							)
						)
					)
				))

			(setq intMissionAchievementString (lambda (missionsCompleted missionsFailed)
				(if (eq (int missionsFailed) 0)
					(int missionsCompleted)
					(cat missionsCompleted " (" missionsFailed " failed)")
					)
				))

			(setq intMissionRewardPayment (lambda (theReward)
				(block Nil
					(plyCredit gPlayer theReward)
					(typIncGlobalData &svPlayer; "missionRewards" theReward)
					)
				))
			)
	</Globals>

</TranscendenceModule>
