<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- INSTALL DEVICE SCREEN =====================================================

	This screen asks the user to pick a device from a list of itemStructs and
	then installs the device (charging appropriately).

	gData uses the following fields:

	itemList:			This is a list of device itemStructs that we should 
						offer to install for the player.

	priceAdj:			A percent of standard price to charge. If Nil, we use
						the source's Trade directives. If an integer, we treat
						it as a % price adjustment (100 = 100% of price). If a
						function, we evaluate it to determine the price.

	installPriceAdj:	The price to install the device. If Nil, we use the 
						item's default install price. If an integer, we treat it
						as a % price adjustment. If a function, we evaluate it
						to determine the price.

	checkMilitaryID:	If True we check to make sure the player has a military
						ID before selling them a military reactor.

	noItemsText:		Text to show if itemList is empty

-->

	<DockScreen UNID="&dsRPGInstallDeviceFromList;"
			type=           "customItemPicker"
			backgroundID=   "&rsItemListScreen;"
			nestedScreen=   "true"
			>

        <List>
			(@ gData 'itemList)
        </List>

        <Panes>
            <Default>
                <onPaneInit>
					(block (result)
						(setq gItem (scrGetItem gScreen))

						(if gItem
							(block (result)
								(setq gCost
									(add
										(rpgAdjustPrice gSource gItem (@ gData 'priceAdj) (objGetDefaultCurrency gSource) 'noInventoryCheck)
										(rpgAdjustInstallPrice gSource gItem (@ gData 'installPriceAdj) (objGetDefaultCurrency gSource))
										)
									)

								(setq result (rpgInstallDevicePrep
									{
									item: gItem
									totalPrice: gCost
									currencyUsed: (objGetDefaultCurrency gSource)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									}))

								(scrSetDesc gScreen (@ result 'desc))
								(scrEnableAction gScreen 0 (@ result 'canInstall))
								)

							; No items in list
							(block Nil
								(scrSetDesc gScreen
									(if (@ gData 'noItemsText)
										(@ gData 'noItemsText)
										"You cannot install any items."
										)
									)
								(scrEnableAction gScreen 0 Nil)
								)
							)
						)
                </onPaneInit>

                <Actions>
                    <Action name="Buy &amp; Install this item" default="1" key="B">
						(block Nil
							(rpgBuyItem gSource gItem gCost (objGetDefaultCurrency gSource))
							(shpInstallDevice gPlayerShip gItem)
							(scrShowPane gScreen "InstallSuccess")
							)
                    </Action>

                    <Action name="Cancel" cancel="1" key="C">
                        (scrExitScreen gScreen)
                    </Action>
                </Actions>
            </Default>

			<InstallSuccess
					noListNavigation="true"
					>
				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen
							(cat (itmGetName gItem 0x01) " installed successfully.")
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</InstallSuccess>
        </Panes>
    </DockScreen>

<!-- JETTISON SCREEN ===========================================================

	This screen allows the player to jettison items either to the docked object
	or to a crate in space.

-->

	<DockScreen UNID="&dsRPGJettison;"
			name=				"Ship's Cargo Hold"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=	"There are no items in your cargo hold that can be jettisoned.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))

						(if thisItem
							(block (availCount fitCount)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gSource thisItem))
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(if (ls (objGetCargoSpaceLeft gSource) 200000)
									(setq desc (cat desc "\nCapacity: " (strMassString (objGetCargoSpaceLeft gSource))))
									)

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "\n\nThere is not enough space here to jettison " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "\n\nThere is enough space to jettison one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "\n\nThere is enough space to jettison only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "\n\nThere is enough space to jettison all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison this item" default="1" key="J" >
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "JettisonQuantity")

							(eq gMaxCount 1)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen 1))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>

			<JettisonQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to jettison?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison" default="1" key="J">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen count))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</JettisonQuantity>
		</Panes>
	</DockScreen>

<!-- LOOT SCREEN ===============================================================

	This screen allows the player to loot items from the object that we're 
	docked with.

-->

	<DockScreen UNID="&dsRPGLoot;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=		"There are no items here.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (fitCount availCount desc)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gPlayerShip thisItem))
								
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You do not have enough space to carry " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "You have enough room to carry one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "You have enough room to carry only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "You have enough room to carry all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot this item" key="L" default="1" >
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "LootQuantity")
							(if (eq gMaxCount 1)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
                        (scrExitScreen gScreen)
					</Action>

				</Actions>
			</Default>

			<LootQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to loot?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot" default="1" key="L">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</LootQuantity>
		</Panes>

	</DockScreen>

<!-- REPAIR ITEM SCREEN ========================================================

	This screen allows the player to repair an item.

	gData uses the following fields:

	criteria:			This is the criteria for items that we can repair.

	priceAdj:			Cost to repair the item as a percent of the standard
						repair price. The standard repair price is equal to the
						difference between the full price and the price of a
						damaged item.

-->
	<DockScreen UNID="&dsRPGRepairItem;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(scrSetListFilter gScreen (@ gData 'criteria))
		</ListOptions>

		<Panes>
			<Default
					desc=	"You do not have any items that we can repair.">

				<OnPaneInit>
					(block (thisItem currencyUsed)
						(setq thisItem (scrGetItem gScreen))
						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gResult Nil)

						(if thisItem
							(block (desc stdRepairCost)
								; Compute the standard repair cost
								(setq stdRepairCost (subtract (itmGetPrice (itmSetProperty thisItem 'damaged Nil) currencyUsed) (itmGetPrice thisItem currencyUsed)))

								; Compute the cost to repair the item
								(setq gCost (divide (multiply stdRepairCost (@ gData 'priceAdj)) 100))

								(switch
									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(setq desc (cat "It will cost " (fmtCurrency currencyUsed gCost) " to repair " (itmGetName thisItem 0x04) ". Unfortunately, you cannot afford the cost."))

									(block Nil
										(setq desc (cat "We can repair " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) "."))
										(setq gResult True)
										)
									)

								(scrSetDesc gScreen desc)
								)
							)

						(scrEnableAction gScreen 0 gResult)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair item" default="1" key="R">
						(block Nil
							(setq gItem (scrGetItem gScreen))
							
							(shpEnhanceItem gPlayerShip gItem)
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							
							(scrShowPane gScreen "Success")
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>

			</Default>

			<Success
					noListNavigation="true"
					>
				<OnPaneInit>
					(scrSetDesc gScreen (cat "Your " (itmGetName gItem 0) " has been repaired successfully."))
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</Success>
		</Panes>

	</DockScreen>

</TranscendenceModule>
