<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Mined Ore -->

	<StationType UNID="&stMinedOre;"
			name=				"mined ore"
			noArticle=			"true"
			sovereign=			"&svNeutral;"
				 
			attributes=			"minedOre"
				 
			dockScreen=			"&dsMinedOre;"

			scale=				"ship"
			mobile=				"true"
			mass=				"10"
			structuralHitPoints="100"
			destroyWhenEmpty=	"true"
			noMapIcon=			"true"
			>

		<ImageVariants>
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="0" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="24" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="48" imageWidth="24" imageHeight="24" />
			<Image			imageID="&rsOreSmall;" imageX="48" imageY="72" imageWidth="24" imageHeight="24" />
		</ImageVariants>
		
		<HeroImage>
			<ImageVariants>
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
				<Image			imageID="&rsMinedOreHero;" imageWidth="600" imageHeight="528" />
			</ImageVariants>
		</HeroImage>

		<DockingPorts
				portCount=		"2"
				portRadius=		"24"
				maxDist=		"3"
				/>

	</StationType>

<!-- TABLES -->

	<ItemTable unid="&tbAsteroidOre;">
		<LocationCriteriaTable>
			<Group criteria="*metallicComp"		value="standard:x=0.30">
				<RandomItem criteria="* +ore; -notStandard; +metallicComp; | * +minable; -notStandard; +metallicComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*organicComp"		value="standard:x=0.20">
				<RandomItem criteria="* +ore; -notStandard; +organicComp; | * +minable; -notStandard; +organicComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*rockyComp"		value="standard:x=0.30">
				<RandomItem criteria="* +ore; -notStandard; +rockyComp; | * +minable; -notStandard; +rockyComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
			<Group criteria="*waterComp"		value="standard:x=0.20">
				<RandomItem criteria="* +ore; -notStandard; +waterComp; | * +minable; -notStandard; +waterComp;" levelFrequency="systemLevel:vruuc|c|cuurv" />
			</Group>
		</LocationCriteriaTable>
	</ItemTable>
	
<!-- GLOBAL -->

	<Globals>
		(block Nil
			(setq miningNotifyOnOreDepositFound (lambda (depositObj finderObj)
				(block (
					(notifyInterval (subtract (unvGetTick) (objGetData depositObj 'lastNotifyTime)))
					)
					
					;	If it's been a while since the last notification, then notify
					;	(We wait 60 seconds before notifying again).
					
					(if (gr notifyInterval 1800)
						(block Nil
							(enum (sysFindObject Nil "TAV") theObj
								(objFireEvent theObj 'OnOreDepositFound {
									depositObj: depositObj
									finderObj: finderObj
									})
								)
								
							;	Remember that we notified
							
							(objSetData depositObj 'lastNotifyTime (unvGetTick))
							)
						)
					)
				))
				
			(setq intAsteroidOnMining (lambda (miningDifficulty)
				(block (
					;	This table is used to calc the number of HP required 
					;	to extract a ton of ore of a given level.
					
					(oreVolumeTable (list
						0
						1   1   2   2   3
						4   5   7   9   11
						15  19  25  33  42
						55  72  93  121 158
						205 266 346 450 586
						))

					(isPlayer (and gPlayerShip (= aOrderGiver gPlayerShip)))
					(successChance (* 2 (rpgCalcToHit aMineProbability miningDifficulty)))
					(debugMining (typGetProperty &unidMiningSkill; 'rpg.debugMining))

					(setExplored Nil)

					theOre countMined
					allOre extractedOre
					)

					(if debugMining
						(block ()
							(dbgOutput "Asteroid difficulty: " miningDifficulty)
							(dbgOutput "Effort: " aMineProbability)
							(dbgOutput "HP: " aHP)
							(dbgOutput "Chance: " successChance)
							)
						)
				
					;	NOTE:
					;
					;	EFFORT is the effort applied to mining (0-100),
					;		stored as aMineProbability.
					;	DIFFICULTY is how hard it is to mine a given asteroid (0-100).
					;	EFFICIENCY is the probability that we succeed in mining ore.
					;	VOLUME is the amount of ore we mine if we succeed.
					;	YIELD is the percent of mined ore that we manage to extract
					;		(the rest is lost).
					;
					;	EFFORT and YIELD are both determined by the mining level
					;	(from the damage descriptor). Consult the following table:
					;
					;	LEVEL	EFFORT		YIELD
					;	1		4			97
					;	2		10			91
					;	3		20			84
					;	4		34			78
					;	5		52			76
					;	6		74			81
					;	7		100			100
					;
					;	EFFICIENCY is computed from EFFORT and DIFFICULTY:
					;
					;	EFFICIENCY = 2 * (EFFORT * EFFORT) / (EFFORT + DIFFICULTY)
					;
					;	VOLUME is computed from hit points of damage and the level of
					;	the ore we're trying to extract.
					
					(switch
					
						;	Compute the chance of success. If there is no chance, 
						;	nothing happens.
						
						(leq successChance 0)
							Nil
							
						;	If we fail at extraction, then nothing
						
						(gr (random 1 100) successChance)
							(if (and isPlayer (not (objGetProperty gSource 'explored)))
								(block (
									;	We get some experience even for failures.
									(xpPerTry (typGetProperty &unidMiningSkill; 'rpg.xpPerFailedTry))
									(xpGained (round 'stochastic (* xpPerTry (/ miningDifficulty 100))))
									)
									(if debugMining
										(dbgOutput "XP " (typGetProperty &unidMiningSkill; 'rpg.miningXP) " [+" xpGained "]")
										)
									(typIncProperty &unidMiningSkill; 'rpg.miningXP xpGained)
									)
								)
								
						;	Pick a random ore item that exists here. If no ore, 
						;	then nothing to do. If we get this far then we've explored
						;	the asteroid.
						
						(not (setq allOre (objGetItems gSource "* +ore; | * +minable;")))
							(setq setExplored True)
							
						;	Figure out how many tons we mine this time.
						
						(not (setq extractedOre 
								(map allOre 'excludeNil theOre
									(block (
										(extractedCount 
											(min 
												(round 'stochastic (/ aHP (@ oreVolumeTable (itmGetLevel theOre))))
												(itmGetCount theOre)
												)
											)
										)
										(if debugMining
											(dbgOutput (itmGetName theOre 'count) ": " extractedCount " extracted")
											)

										(if (gr extractedCount 0)
											(itmSetCount theOre extractedCount)
											)
										)
									)
								))
							(setq setExplored True)
						
						;	Otherwise, success
						
						(block (
							;	Compute the yield based on the mining rating and
							;	player's mining skill
							
							(yield (subtract 100 (divide (multiply aMineProbability (subtract 100 aMineProbability)) 100)))
							(yieldAdj 
								(if isPlayer
									(* (typGetProperty &unidMiningSkill; 'rpg.miningYieldAdj) (/ yield 100))
									(/ yield 100)
									)
								)

							(minedOre
								(map extractedOre 'excludeNil theOre
									(block (
										;	Compute actual yield in tons

										(yieldActual (round 'stochastic (* yieldAdj (itmGetCount theOre))))
										)
										(if debugMining
											(dbgOutput (itmGetName theOre 'count) " yields " yieldActual)
											)

										(if (gr yieldActual 0)
											(itmSetCount theOre yieldActual)
											)
										)
									)
								)
								
							oreObj
							)
							(if debugMining
								(dbgOutput "Yield Adj: " yieldAdj)
								)

							(setq setExplored True)
							
							(enum extractedOre theOre
								(objRemoveItem gSource theOre)
								)
							
							(if minedOre
								(block (
									(depositID (objGetData gSource 'oreDeposit))
									)
									;	Create floating ore object
									
									(setq oreObj (sysCreateStation &stMinedOre; aMinePos))
									(objIncVel oreObj (sysVectorPolarVelocity aMineDir 5))
									
									;	Put ore items in it
									
									(enum minedOre theOre
										(objAddItem oreObj theOre)
										)

									;	Increment mining experience

									(if isPlayer
										(block (
											(xpGained 
												(round 'stochastic
													(map minedOre 'reduceSum theItem 
														(* (itmGetCount theItem)
															(or (itmGetProperty theItem 'rpg.miningXP)
																(typGetProperty &unidMiningSkill; 'rpg.xpPerItem)
																)
															(/ miningDifficulty 50)
															)
														)
													)
												)
											)
											(typIncProperty &unidMiningSkill; 'rpg.miningXP xpGained)
											(if debugMining
												(dbgOutput "XP " (typGetProperty &unidMiningSkill; 'rpg.miningXP) " [+" xpGained "]")
												)
											)
										)
								
									;	If we don't already have an ore count overlay, and if
									;	there is any ore left in the asteroid, add one.
									
									(if (and (objGetItems gSource "* +ore; | * +minable;")
											(not (filter (objGetOverlays gSource) theOverlay
												(= (objGetOverlayType gSource theOverlay) &ovMiningOreCount;)
												))
											)
										(block (
											overlayID
											)
											(setq overlayID (objAddOverlay gSource &ovMiningOreCount;))
											(objSetOverlayProperty gSource overlayID 'counterLabel (typTranslate &ovMiningOreCount; 'msgScanning))
											)
										)
										
									;	If this asteroid is part of a deposit, then notify others
									
									(if depositID
										(miningNotifyOnOreDepositFound (objGetObjByID depositID) aMiner)
										)
									)
								)
							)
						)

					;	If the asteroid has been explored, then increment our stats.

					(if setExplored

						;	This is a slight HACK. Setting 'exploredByPlayer will also 
						;	increment the stat of asteroids mined in the system. We need to
						;	do it this way because we can't access ply* functions from this
						;	level. In the future we should move player stats to the engine.

						(objSetProperty gSource (if isPlayer 'exploredByPlayer 'explored) True)
						)
					)
				))
			)
	</Globals>
	
<!-- DOCK SCREENS -->

	<!-- Mined Ore Dock Screen -->

	<DockScreen UNID="&dsMinedOre;"
		inherit="&dsDockScreenBase;"
			>
		
		<OnScreenInit>
			(switch
				;	If there is ore here, and we have a miner's cargo hold
				;	(or have already destroyed most of the ore), go straight to looting screen.
				
				(and (objGetItems gSource "*")
					(or (objGetItems gPlayerShip "*I +MinersHold;")
						(objGetData gSource 'oreDestroyed)
						)
					)
					(scrShowScreen gScreen &dsRPGLoot; {
						forceUndock: 'forceUndock
						lootLabel: (scrTranslate gScreen 'actionBringAboard)
						descLootQuantity: (scrTranslate gScreen 'descLootQuantity)
						})
				)
		</OnScreenInit>

		<InitialPane>
			(switch
				(not (objGetItems gSource "*"))
					"Empty"
					
				"NoMinersHold"
				)
		</InitialPane>

		<Panes>
			<NoMinersHold descID="descNoMinersHold">
				<Actions>
					<Action id="actionContinue" default="1">
						(block (oreToRemove)
							; Remove 75% of the ore
							(setq oreToRemove Nil)
							(objEnumItems gSource "* +ore; | * +minable;" theItem
								(block (count)
									(setq count (divide (multiply 75 (itmGetCount theItem)) 100))
									(if (gr count 0)
										(setq oreToRemove (append oreToRemove (list (itmSetCount theItem count))))
										)
									)
								)

							(enum oreToRemove theItem
								(objRemoveItem gSource theItem)
								)
							
							; Remember that we've destroyed ore.
							(objSetData gSource 'oreDestroyed True)
							
							; Loot
							(scrShowScreen gScreen &dsRPGLoot; {
								forceUndock: 'forceUndock
								lootLabel: (scrTranslate gScreen 'actionBringAboard)
								descLootQuantity: (scrTranslate gScreen 'descLootQuantity)
								})
							)
					</Action>

					<Action id="actionLeave" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</NoMinersHold>

			<Empty descID="descEmpty">
				<Actions>
					<Action id="actionLeave" default="1" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</Empty>
		</Panes>

		<Language>
			<Text id="actionBringAboard">[B]ring Aboard</Text>
			<Text id="descEmpty">
				You are floating next to boulders of mined ore.
			</Text>
			<Text id="descNoMinersHold">

				Without a miner's cargo hold you find it difficult to bring 
				aboard all the ore. You will only be able to recover part of 
				the ore.
				
				Continue anyway?

			</Text>
			<Text id="descLootQuantity">How many items do you wish to bring aboard?</Text>
		</Language>
	</DockScreen>
	
<!-- OVERLAYS -->
	
	<OverlayType UNID="&ovMiningOreCount;"
			attributes=		"effect, oreCount"
			>
		<Counter style=		"flag"
				color=		"#5ff12a"
				showOnMap=	"true"
				/>
	
		<Events>
			<OnUpdate>
				(block (
					(oreFound (objGetItems gSource "* +ore; | * +minable;"))
					(tons (or 
						(map oreFound 'reduceSum theItem 
							(/ (* (itmGetCount theItem) (itmGetMass theItem)) 1000)
							)
						0
						))

					(yieldAdj (typGetProperty &unidMiningSkill; 'rpg.miningYieldAdj))
					(adjCount (round (* tons yieldAdj)))
					)
					
					(if (= tons 0)
						(objRemoveOverlay gSource aOverlayID)
						(block Nil
							(objSetOverlayProperty gSource aOverlayID 'counter tons)
							(objSetOverlayProperty gSource aOverlayID 'counterLabel
								(fmtNoun (typTranslate gType 'msgTonsOfOre) tons 'noDeterminer)
								)
							)
						)
					)
			</OnUpdate>
		</Events>
	
		<Language>
			<Text id="msgNoOreFound">No ore found</Text>
			<Text id="msgScanning">Scanning...</Text>
			<Text id="msgTonsOfOre">
				ton(s) of ore
			</Text>
		</Language>
	</OverlayType>
	
<!-- RESOURCES -->

	<Image UNID="&rsOreSmall;" bitmap="Resources\OreSmall.jpg" bitmask="Resources\OreSmallMask.bmp" loadOnUse="true" />
	<Image UNID="&rsMinedOreBkgnd;" bitmap="Resources\MinedOreScreen.jpg" loadOnUse="true" />
	<Image UNID="&rsMinedOreHero;" bitmap="Resources\MinedOreHero.jpg" bitmask="Resources\MinedOreHeroMask.bmp" loadOnUse="true" />

</TranscendenceModule>
