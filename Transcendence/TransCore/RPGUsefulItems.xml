<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- RPG USE ITEM ON ARMOR =====================================================

	This screen allows the player to use an item on an armor segment.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItemOnArmor;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>
		<Display type="armorSelector"
				dataFrom=	"player"
				list=		"aI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="rpg.tabLabel">Installed Armor</Text>
			<Text id="actionUse">[U]se on this Armor Segment</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON DEVICE ====================================================

	This screen allows the player to use an item on an installed device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItemOnDevice;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="deviceSelector"
				dataFrom=	"player"
				list=		"dI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="rpg.tabLabel">Installed Devices</Text>
			<Text id="actionUse">[U]se on this Device</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON SHIELDS ===================================================

	This screen allows the player to use an item on an installed device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItemOnShields;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="deviceSelector"
				dataFrom=	"player"
				list=		"sI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="rpg.tabLabel">Shields</Text>
			<Text id="actionUse">[U]se on this Shield</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON CARGO =====================================================

	This screen allows the player to use an item on an item in the cargo bay.

	gData uses the following fields:

		useItem: The item being used. If not specifed we check gItem instead.

		criteria: If non-Nil, this is the criteria of items to show.

-->

	<DockScreen UNID="&dsRPGUseItemOnCargo;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="itemPicker"
				dataFrom=	"player"
				list=		"*U"
				>
			<OnDisplayInit>
				(block (
					(useItem (scrGetData gScreen 'useItem))
					(criteria (@ gData 'criteria))
					)
					(switch
						(isfunction criteria)
							(scrSetListFilter gScreen criteria)

						criteria
							(scrSetListFilter gScreen (lambda (theItem)
								(and (itmMatches theItem criteria) (not (itmIsEqual theItem useItem)))
								))
						)

					;	Do not need to reproduce details shown in itemPicker list
					(scrSetData gScreen 'hideCurrent True)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
		</Panes>

		<Language>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM BASE =========================================================

	Base class for the various Use Item on XYZ dockscreens.

	gData uses the following fields:

		useItem: The item being used. If not specifed we check gItem instead.

	The following item properties will affect behavior

		rpg.useCriteria: This will be used by the item base classes and display
				lists to filter items to show

		rpg.unknownUseCriteria: This optional criteria will be used instead of
				rpg.useCriteria if the item being used is unknown to the player.

-->

	<DockScreen UNID="&dsRPGUseItemBase;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			name=				"=(itmGetName (or (@ gData 'useItem) gItem) 'capitalize)"
			>

		<OnScreenInit>
			(block (
				(useItemSaved (or (@ gData 'useItem) gItem))
				(useItem (@ (filter (objGetItems gPlayerShip '*) theItem (itmIsEqual theItem useItemSaved)) 0))

				(cargoCriteria 
					(switch
						(itmIsKnown useItem)
							(itmGetProperty useItem 'rpg.useCriteria)

						(or (itmGetProperty useItem 'rpg.unknownUseCriteria)
							(itmGetProperty useItem 'rpg.useCriteria)
							)
						)
					)

				(hasGeneralCargo (filter (objGetItems gPlayerShip "*~admU") theItem (itmMatches theItem cargoCriteria)))
				(hasDevicesCargo (filter (objGetItems gPlayerShip "dU") theItem (itmMatches theItem cargoCriteria)))
				(hasArmorCargo (filter (objGetItems gPlayerShip "aU") theItem (itmMatches theItem cargoCriteria)))
				(hasAmmoCargo (filter (objGetItems gPlayerShip "m") theItem (itmMatches theItem cargoCriteria)))
				)
				(scrSetData gScreen 'useItem useItemSaved)

				;	If we have a cargo criteria (meaning we can use the item on a 
				;	cargo item, then we need a tab set.

				(if (and cargoCriteria (not (@ gData 'subTab)))
					(scrSetTabSet gScreen (list
						{
							id: 'configuration
							label: (typTranslate gType 'rpg.tabLabel)
							screen: gType
							data: gData
							}

						(if hasGeneralCargo
							{
								id: 'generalCargo
								label: (typTranslate gType 'labelGeneralCargo)
								screen: &dsRPGUseItemOnCargo;
								data: {
									useItem: useItem
									criteria: 
										(lambda (theItem)
											(and (itmMatches theItem "*~admU") 
												(not (itmIsEqual theItem useItem))
												(itmMatches theItem cargoCriteria)
												)
											)
									subTab: True
									}
								}
							)

						(switch
							(and hasDevicesCargo hasArmorCargo)
								{
									id: 'armorAndDevicesCargo
									label: (typTranslate gType 'labelArmorAndDevicesCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "adU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}

							(and hasArmorCargo)
								{
									id: 'armorCargo
									label: (typTranslate gType 'labelArmorCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "aU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}

							(and hasDevicesCargo)
								{
									id: 'devicesCargo
									label: (typTranslate gType 'labelDevicesCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "dU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}
							)

						(if hasAmmoCargo
							{
								id: 'devicesCargo
								label: (typTranslate gType 'labelAmmoCargo)
								screen: &dsRPGUseItemOnCargo;
								data: {
									useItem: useItem
									criteria: 
										(lambda (theItem)
											(and (itmMatches theItem "m") 
												(not (itmIsEqual theItem useItem))
												(itmMatches theItem cargoCriteria)
												)
											)
									subTab: True
									}
								}
							)
						))
					)
				)
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(useItem (@ (filter (objGetItems gPlayerShip '*) theItem (itmIsEqual theItem (scrGetData gScreen 'useItem))) 0))
						(theShip gPlayerShip)
						(dstItem (scrGetItem gScreen))
						(useInfo (itmFireEvent useItem 'CanUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								} ))

						(cargoCriteria 
							(switch
								(itmIsKnown useItem)
									(itmGetProperty useItem 'rpg.useCriteria)

								(or (itmGetProperty useItem 'rpg.unknownUseCriteria)
									(itmGetProperty useItem 'rpg.useCriteria)
									)
								)
							)

						;	Initialise the screen set if necessary
						)
						;(dbgOutput "useInfo: " useInfo)

						;	Set the description
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem '(titleCapitalize countOnly))
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(switch
							(not dstItem)
								(scrSetDescTranslate gScreen 'descNoItemsHere)

							(@ useInfo 'desc)
								(scrSetDesc gScreen (@ useInfo 'desc))

							(scrSetDescTranslate gScreen 'descCanNotUse {
								useItem: (itmGetName useItem 'article)
								dstItem: (itmGetName dstItem 'article)
								})
							)
						(scrEnableAction gScreen 'actionUse (@ useInfo 'canUse))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(useItem (scrGetData gScreen 'useItem))
							(theShip gPlayerShip)
							(dstItem (scrGetItem gScreen))
							(theCursor (scrGetListCursor gScreen))
							result
							)
							;	Use the item
							(setq result (itmFireEvent useItem 'OnUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								}))

							;	Restore the cursor position
							(scrSetListCursor gScreen theCursor)

							;	Store result and display it
							(scrSetData gScreen 'usageResult result)
							(scrShowPane gScreen 'ShowResult)
							)
					</Action>
				</Actions>
			</Default>

			<ShowResult noListNavigation="true">
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(dstItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(result (scrGetData gScreen 'usageResult))
						)
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName (itmSetCount useItem 1) '(titleCapitalize countOnly))
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(scrSetDesc gScreen (@ result 'desc))

						(if (and (objHasItem theShip useItem 1) (not (@ result 'nextScreen)))

							;	If we've got another item to use, ask if the player wants
							;	to use it.

							(block ()
								(scrShowAction gScreen 'actionDone True)
								(scrShowAction gScreen 'actionUseAnother True)
								;(scrSetActionLabel gScreen 'actionUseAnother (scrTranslate gScreen 'actionUseAnother {
								;	itemName: (itmGetName useItem 0)
								;	}))
								)

							;	Done

							(block ()
								(scrShowAction gScreen 'actionDone True)
								(scrShowAction gScreen 'actionUseAnother Nil)
								)
							)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUseAnother" default="1">
						(scrShowPane gScreen 'Default)
					</Action>

					<Action id="actionDone" default="1" cancel="1">
						(block (
							(result (scrGetData gScreen 'usageResult))
							)
							(switch
								(= (@ result 'nextScreen) 'forceUndock)
									(scrExitScreen gScreen 'forceUndock)

								(= (@ result 'nextScreen) 'forceExit)
									(scrExitScreen gScreen)

								(@ result 'nextScreen)
									(block Nil
										(scrExitScreen gScreen)
										(scrShowScreen gScreen (@ result 'nextScreen) (@ result 'nextScreenData))
										)

								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</ShowResult>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Item</Text>
			<Text id="actionUseOnCargo">Use on [C]argo Item</Text>
			<Text id="actionUseAnother">[U]se Another</Text>

			<Text id="labelGeneralCargo">General Cargo</Text>
			<Text id="labelArmorAndDevicesCargo">Devices &amp; Armor Cargo</Text>
			<Text id="labelArmorCargo">Armor Cargo</Text>
			<Text id="labelDevicesCargo">Devices Cargo</Text>
			<Text id="labelAmmoCargo">Ammo Cargo</Text>

			<Text id="descCanNotUse">You cannot use %useItem% on %dstItem%.</Text>
		</Language>
	</DockScreen>


<!-- BASE CLASSES -->

	<!-- Device Enhancment Item Base Class

	Items to enhance devices should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnDevice.

	STATIC DATA
		enhancement - enhancement to apply
		enhancementTable - table of criteria and enhancements for different device types / levels

    -->

	<Type UNID="&baStdDeviceEnhancement;">
		<Properties>
			<Constant id="rpg.useCriteria">"d"</Constant>
		</Properties>

		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(useCriteria (itmGetProperty gItem 'rpg.useCriteria))
					(enhancementInfo (rpgFindItemInTable dstItem (or (itmGetProperty gItem 'rpg.enhancementTable) (itmGetStaticData gItem 'enhancementTable))))
					(trData {
						useItem: (itmGetName gItem 'article)
						dstItem: (itmGetName dstItem '(demonstrative noModifiers))
						})
					)
					(switch
						(not (itmMatches dstItem useCriteria))
							Nil

						(not (itmIsKnown gItem))
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageUnknown {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						(@ enhancementInfo 'repair)
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageRepair trData)
								}

						(not (@ enhancementInfo 'enhancement))
							{
								canUse: Nil
								desc: 
									(or (itmTranslate gItem (@ enhancementInfo 'descID) trData)
										(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)) trData)
										)
								}

						{
							canUse: True
							desc: (itmTranslate gItem 'descUsageOK trData)
							}
						)
					)
			</CanUseOnItem>

			<GetEnhancement>

				;	This event is called by objCanEnhanceItem and objEnhanceItem
				;	to figure out what enhancement will be applied.
				;
				;	gItem: The item doing the enhancing
				;
				;	gData
				;		targetItem: The item being enhanced.
				;
				;	RETURN
				;		Nil: Cannot enhance target (no effect)
				;		'repair: Target item should be repaired
				;
				;		enhancement description:
				;			enhancement: Enhancement code/desc (required)
				;			lifetime: Duration of enhancement (ticks). Nil or -1
				;				means permanent.
				;			type: Item type of enhancement (only if different
				;				from gItem).
				;			desc: Explanation for result

				(block (
					(dstItem (@ gData 'targetItem))
					enhancement
					enhancementInfo
					(trData {
						useItem: (itmGetName gItem 'article)
						dstItem: (itmGetName dstItem '(demonstrative noModifiers))
						})
					)
					(switch

						;	Only works on devices

						(not (itmMatches dstItem "d"))
							Nil

						;	Backwards compatibility

						(setq enhancement (itmGetStaticData gItem 'enhancement))
							{	
								enhancement: enhancement
								}

						;	Table look up
						;	NOTE: It is OK if we find a table entry with no enhancement.
						;	That just means that we cannot enhance the target (usually
						;	due to level) and the desc field explains why.

						(setq enhancementInfo (rpgFindItemInTable dstItem 
								(or (itmGetProperty gItem 'rpg.enhancementTable)
									(itmGetStaticData gItem 'enhancementTable)
									)
								))
							{
								enhancement: (@ enhancementInfo 'enhancement)
								lifetime: (@ enhancementInfo 'lifetime)
								desc: (or (itmTranslate gItem (@ enhancementInfo 'descID) trData)
										(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)) trData)
										)
								}

						;	Invalid

						Nil
						)
					)
			</GetEnhancement>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(trData {
						dstItem: (itmGetName dstItem 'noModifiers)
						})

					result
					)
					;	Apply the enhancement

					(setq result (objEnhanceItem gPlayerShip dstItem gItem))

					;	Remove and identify the item

					(objRemoveItem gPlayerShip gItem 1)
					(itmSetKnown gItem)

					;	Describe what happened

					{
						desc: (join 
								(list
									(itmTranslate gItem 'descResultIntro trData)
									(or (@ result 'desc)
										(itmTranslate gItem (cat "descResult." (@ result 'resultCode)) trData)
										)
									)
								" "
								)
						}
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descResult.ok">Your %dstItem% is more powerful.</Text>
			<Text id="descResult.alreadyEnhanced">Your %dstItem% does not need the enhancement.</Text>
			<Text id="descResult.defectRemoved">The enhancement has repaired a defect on your %dstItem%.</Text>
			<Text id="descResult.degraded">Your %dstItem% has weakened further.</Text>
			<Text id="descResult.enhancementRemoved">Your %dstItem% has lost its enhancement.</Text>
			<Text id="descResult.enhancementReplaced">Your %dstItem% has been enhanced, but has lost its previous enhancement.</Text>
			<Text id="descResult.improved">Your %dstItem% has been further enhanced.</Text>
			<Text id="descResult.noEffect">The enhancement has no effect.</Text>
			<Text id="descResult.repaired">Your %dstItem% has been repaired.</Text>

			<Text id="descUsageOK">You can use %useItem% on %dstItem%.</Text>
			<Text id="descUsageRepair">You can use %useItem% to repair %dstItem%.</Text>
			<Text id="descUsageUnknown">This appears to be some kind of device upgrade. You can use it on %dstItem%.</Text>

			<Text id="descResultTooAdvanced">Unfortunately, your device is too advanced to be upgraded.</Text>
			<Text id="descResultTooPrimitive">Unfortunately, your device is too primitive for the upgrade.</Text>
		</Language>
	</Type>

<!-- CODE -->

	<Globals>
		(block Nil
			;	Just a wrapper to save some typing
			(setq itmTranslate (lambda (theItem textID data default)
				(typTranslate (itmGetType theItem) textID data default)
				))
			)
	</Globals>

</TranscendenceModule>
